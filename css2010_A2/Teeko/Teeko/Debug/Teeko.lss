
Teeko.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000283c  000028d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000283c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  00800124  00800124  000028f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b77  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a8  00000000  00000000  00005847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e8  00000000  00000000  000069ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000850  00000000  00000000  000091d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ca0  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178d  00000000  00000000  0000a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000be55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_5>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_16>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_20>
      54:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_21>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 75       	andi	r20, 0x53	; 83
      7e:	72 72       	andi	r23, 0x22	; 34
      80:	65 6e       	ori	r22, 0xE5	; 229
      82:	74 20       	and	r7, r4
      84:	50 6c       	ori	r21, 0xC0	; 192
      86:	61 79       	andi	r22, 0x91	; 145
      88:	65 72       	andi	r22, 0x25	; 37
      8a:	3a 20       	and	r3, r10
      8c:	31 20       	and	r3, r1
      8e:	28 67       	ori	r18, 0x78	; 120
      90:	72 65       	ori	r23, 0x52	; 82
      92:	65 6e       	ori	r22, 0xE5	; 229
      94:	29 00       	.word	0x0029	; ????

00000096 <__c.2259>:
      96:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
      a6:	20 20 20 20 20 20 20 20 20 20 00                              .

000000b1 <__c.2257>:
      b1:	43 75 72 72 65 6e 74 20 50 6c 61 79 65 72 3a 20     Current Player: 
      c1:	32 20 28 72 65 64 29 00                             2 (red).

000000c9 <__c.2255>:
      c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
      d9:	20 20 20 20 20 20 20 20 20 20 00                              .

000000e4 <__c.2295>:
      e4:	50 72 65 73 73 20 61 6e 79 20 49 4f 62 6f 61 72     Press any IOboar
      f4:	64 20 62 75 74 74 6f 6e 20 74 77 69 63 65 00        d button twice.

00000103 <__c.2293>:
     103:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000010d <__c.2291>:
     10d:	70 6c 61 79 65 72 20 25 64 20 69 73 20 74 68 65     player %d is the
     11d:	20 77 69 6e 6e 65 72 00                              winner.

00000125 <__c.2282>:
     125:	20 20 20 20 20 20 20 20 20 20 20 00                            .

00000131 <__c.2280>:
     131:	47 61 6d 65 20 50 61 75 73 65 64 00                 Game Paused.

0000013d <__c.2276>:
     13d:	43 75 72 72 65 6e 74 20 50 6c 61 79 65 72 3a 20     Current Player: 
     14d:	31 20 28 67 72 65 65 6e 29 00                       1 (green).

00000157 <__c.2260>:
     157:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     167:	6f 6a 65 63 74 20 62 79 20 4a 65 61 6e 2d 50 69     oject by Jean-Pi
     177:	65 72 72 65 20 4c 65 20 52 6f 75 78 20 34 35 38     erre Le Roux 458
     187:	33 39 35 37 33 00                                   39573.

0000018d <__c.2258>:
     18d:	54 65 65 6b 6f 00                                   Teeko.

00000193 <__c.2040>:
     193:	1b 5b 32 4a 00                                      .[2J.

00000198 <__c.2025>:
     198:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	d8 e0       	ldi	r29, 0x08	; 8
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	11 e0       	ldi	r17, 0x01	; 1
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	ec e3       	ldi	r30, 0x3C	; 60
     1b6:	f8 e2       	ldi	r31, 0x28	; 40
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a4 32       	cpi	r26, 0x24	; 36
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	22 e0       	ldi	r18, 0x02	; 2
     1c6:	a4 e2       	ldi	r26, 0x24	; 36
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a6 37       	cpi	r26, 0x76	; 118
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <main>
     1d8:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     1e0:	e8 e6       	ldi	r30, 0x68	; 104
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	82 60       	ori	r24, 0x02	; 2
     1e8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     1ea:	8b b3       	in	r24, 0x1b	; 27
     1ec:	82 60       	ori	r24, 0x02	; 2
     1ee:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     1f0:	ec e6       	ldi	r30, 0x6C	; 108
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	8f 60       	ori	r24, 0x0F	; 15
     1f8:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     1fa:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
     1fe:	08 95       	ret

00000200 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     200:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     204:	18 16       	cp	r1, r24
     206:	14 f5       	brge	.+68     	; 0x24c <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     208:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     20c:	6f b7       	in	r22, 0x3f	; 63
		cli();
     20e:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	09 c0       	rjmp	.+18     	; 0x226 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     214:	f9 01       	movw	r30, r18
     216:	eb 5d       	subi	r30, 0xDB	; 219
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	40 81       	ld	r20, Z
     21c:	f9 01       	movw	r30, r18
     21e:	ec 5d       	subi	r30, 0xDC	; 220
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     224:	9f 5f       	subi	r25, 0xFF	; 255
     226:	29 2f       	mov	r18, r25
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__data_end>
     22e:	04 2e       	mov	r0, r20
     230:	00 0c       	add	r0, r0
     232:	55 0b       	sbc	r21, r21
     234:	24 17       	cp	r18, r20
     236:	35 07       	cpc	r19, r21
     238:	6c f3       	brlt	.-38     	; 0x214 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     23a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
     23e:	91 50       	subi	r25, 0x01	; 1
     240:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__data_end>
		
		if(interrupts_were_enabled) {
     244:	66 23       	and	r22, r22
     246:	1c f4       	brge	.+6      	; 0x24e <button_pushed+0x4e>
			// Turn them back on again
			sei();
     248:	78 94       	sei
     24a:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     24c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     24e:	08 95       	ret

00000250 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	2f 93       	push	r18
     25c:	3f 93       	push	r19
     25e:	4f 93       	push	r20
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     268:	43 b1       	in	r20, 0x03	; 3
     26a:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	26 c0       	rjmp	.+76     	; 0x2bc <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     270:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
     274:	94 30       	cpi	r25, 0x04	; 4
     276:	0c f5       	brge	.+66     	; 0x2ba <__vector_5+0x6a>
     278:	24 2f       	mov	r18, r20
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	08 2e       	mov	r0, r24
     27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_5+0x34>
     280:	35 95       	asr	r19
     282:	27 95       	ror	r18
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <__vector_5+0x30>
     288:	20 ff       	sbrs	r18, 0
     28a:	17 c0       	rjmp	.+46     	; 0x2ba <__vector_5+0x6a>
				(button_state & (1 << pin)) && 
				!(last_button_state & (1 << pin))) {
     28c:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <last_button_state>
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	08 2e       	mov	r0, r24
     294:	02 c0       	rjmp	.+4      	; 0x29a <__vector_5+0x4a>
     296:	35 95       	asr	r19
     298:	27 95       	ror	r18
     29a:	0a 94       	dec	r0
     29c:	e2 f7       	brpl	.-8      	; 0x296 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1 << pin)) && 
     29e:	20 fd       	sbrc	r18, 0
     2a0:	0c c0       	rjmp	.+24     	; 0x2ba <__vector_5+0x6a>
				!(last_button_state & (1 << pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2a2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	9e 0f       	add	r25, r30
     2aa:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__data_end>
     2ae:	0e 2e       	mov	r0, r30
     2b0:	00 0c       	add	r0, r0
     2b2:	ff 0b       	sbc	r31, r31
     2b4:	eb 5d       	subi	r30, 0xDB	; 219
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     2ba:	8f 5f       	subi	r24, 0xFF	; 255
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	c0 f2       	brcs	.-80     	; 0x270 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     2c0:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <last_button_state>
     2c4:	ff 91       	pop	r31
     2c6:	ef 91       	pop	r30
     2c8:	9f 91       	pop	r25
     2ca:	8f 91       	pop	r24
     2cc:	4f 91       	pop	r20
     2ce:	3f 91       	pop	r19
     2d0:	2f 91       	pop	r18
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <initialise_display>:

// constant value used to display 'TEEKO' on launch
static const uint8_t teeko_display[MATRIX_NUM_COLUMNS] = 
		{65, 125, 65, 124, 84, 84, 125, 85, 85, 124, 16, 108, 57, 69, 69, 57};

void initialise_display(void) {
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	68 97       	sbiw	r28, 0x18	; 24
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     2f4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BG;
     2fe:	e1 e0       	ldi	r30, 0x01	; 1
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	e8 0f       	add	r30, r24
     308:	f9 1f       	adc	r31, r25
     30a:	25 e3       	ldi	r18, 0x35	; 53
     30c:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	88 30       	cpi	r24, 0x08	; 8
     312:	91 05       	cpc	r25, r1
     314:	a4 f3       	brlt	.-24     	; 0x2fe <initialise_display+0x22>
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	10 e0       	ldi	r17, 0x00	; 0
     31a:	08 c0       	rjmp	.+16     	; 0x32c <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the left
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
     31c:	be 01       	movw	r22, r28
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	80 2f       	mov	r24, r16
     324:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the left
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
     328:	0f 5f       	subi	r16, 0xFF	; 255
     32a:	1f 4f       	sbci	r17, 0xFF	; 255
     32c:	05 30       	cpi	r16, 0x05	; 5
     32e:	11 05       	cpc	r17, r1
     330:	ac f3       	brlt	.-22     	; 0x31c <initialise_display+0x40>
     332:	0a e0       	ldi	r16, 0x0A	; 10
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	08 c0       	rjmp	.+16     	; 0x348 <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
		ledmatrix_update_column(x, col_colours);
     338:	be 01       	movw	r22, r28
     33a:	6f 5f       	subi	r22, 0xFF	; 255
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	80 2f       	mov	r24, r16
     340:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ledmatrix_update_column>
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
     344:	0f 5f       	subi	r16, 0xFF	; 255
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	00 31       	cpi	r16, 0x10	; 16
     34a:	11 05       	cpc	r17, r1
     34c:	ac f3       	brlt	.-22     	; 0x338 <initialise_display+0x5c>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	09 c0       	rjmp	.+18     	; 0x366 <initialise_display+0x8a>
	}
	
	// create an array with the background colour at every position
	PixelColour row_colours[MATRIX_NUM_COLUMNS];
	for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
		row_colours[col] = MATRIX_COLOUR_BG;
     354:	e9 e0       	ldi	r30, 0x09	; 9
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	ec 0f       	add	r30, r28
     35a:	fd 1f       	adc	r31, r29
     35c:	e8 0f       	add	r30, r24
     35e:	f9 1f       	adc	r31, r25
     360:	25 e3       	ldi	r18, 0x35	; 53
     362:	20 83       	st	Z, r18
		ledmatrix_update_column(x, col_colours);
	}
	
	// create an array with the background colour at every position
	PixelColour row_colours[MATRIX_NUM_COLUMNS];
	for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	80 31       	cpi	r24, 0x10	; 16
     368:	91 05       	cpc	r25, r1
     36a:	a4 f3       	brlt	.-24     	; 0x354 <initialise_display+0x78>
     36c:	00 e0       	ldi	r16, 0x00	; 0
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	08 c0       	rjmp	.+16     	; 0x382 <initialise_display+0xa6>
		row_colours[col] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the bottom
	for (int y = 0; y < MATRIX_Y_OFFSET; y++) {
		ledmatrix_update_row(y, row_colours);
     372:	be 01       	movw	r22, r28
     374:	67 5f       	subi	r22, 0xF7	; 247
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 2f       	mov	r24, r16
     37a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ledmatrix_update_row>
	for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
		row_colours[col] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the bottom
	for (int y = 0; y < MATRIX_Y_OFFSET; y++) {
     37e:	0f 5f       	subi	r16, 0xFF	; 255
     380:	1f 4f       	sbci	r17, 0xFF	; 255
     382:	02 30       	cpi	r16, 0x02	; 2
     384:	11 05       	cpc	r17, r1
     386:	ac f3       	brlt	.-22     	; 0x372 <initialise_display+0x96>
     388:	07 e0       	ldi	r16, 0x07	; 7
     38a:	10 e0       	ldi	r17, 0x00	; 0
     38c:	08 c0       	rjmp	.+16     	; 0x39e <initialise_display+0xc2>
		ledmatrix_update_row(y, row_colours);
	}

	// and add the bounds on the right
	for (int y = MATRIX_Y_OFFSET + HEIGHT; y < MATRIX_NUM_ROWS; y++) {
		ledmatrix_update_row(y, row_colours);
     38e:	be 01       	movw	r22, r28
     390:	67 5f       	subi	r22, 0xF7	; 247
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	80 2f       	mov	r24, r16
     396:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ledmatrix_update_row>
	for (int y = 0; y < MATRIX_Y_OFFSET; y++) {
		ledmatrix_update_row(y, row_colours);
	}

	// and add the bounds on the right
	for (int y = MATRIX_Y_OFFSET + HEIGHT; y < MATRIX_NUM_ROWS; y++) {
     39a:	0f 5f       	subi	r16, 0xFF	; 255
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	08 30       	cpi	r16, 0x08	; 8
     3a0:	11 05       	cpc	r17, r1
     3a2:	ac f3       	brlt	.-22     	; 0x38e <initialise_display+0xb2>
		ledmatrix_update_row(y, row_colours);
	}
}
     3a4:	68 96       	adiw	r28, 0x18	; 24
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <start_display>:

void start_display(void) {
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	28 97       	sbiw	r28, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     3d0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	29 c0       	rjmp	.+82     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		col_data = teeko_display[col];
     3d8:	e1 2f       	mov	r30, r17
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	ec 5e       	subi	r30, 0xEC	; 236
     3de:	fe 4f       	sbci	r31, 0xFE	; 254
     3e0:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     3e2:	90 ff       	sbrs	r25, 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <start_display+0x30>
			colour = COLOUR_RED;
     3e6:	2f e0       	ldi	r18, 0x0F	; 15
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     3ea:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	13 c0       	rjmp	.+38     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     3f0:	99 23       	and	r25, r25
     3f2:	44 f4       	brge	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				column_colour_data[i] = colour;
     3f4:	e1 e0       	ldi	r30, 0x01	; 1
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ec 0f       	add	r30, r28
     3fa:	fd 1f       	adc	r31, r29
     3fc:	e8 0f       	add	r30, r24
     3fe:	f1 1d       	adc	r31, r1
     400:	20 83       	st	Z, r18
     402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				} else {
				column_colour_data[i] = 0;
     404:	e1 e0       	ldi	r30, 0x01	; 1
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ec 0f       	add	r30, r28
     40a:	fd 1f       	adc	r31, r29
     40c:	e8 0f       	add	r30, r24
     40e:	f1 1d       	adc	r31, r1
     410:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     412:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     414:	81 50       	subi	r24, 0x01	; 1
     416:	81 11       	cpse	r24, r1
     418:	eb cf       	rjmp	.-42     	; 0x3f0 <start_display+0x36>
				} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     41a:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     41c:	be 01       	movw	r22, r28
     41e:	6f 5f       	subi	r22, 0xFF	; 255
     420:	7f 4f       	sbci	r23, 0xFF	; 255
     422:	81 2f       	mov	r24, r17
     424:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     428:	1f 5f       	subi	r17, 0xFF	; 255
     42a:	10 31       	cpi	r17, 0x10	; 16
     42c:	a8 f2       	brcs	.-86     	; 0x3d8 <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     42e:	28 96       	adiw	r28, 0x08	; 8
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	08 95       	ret

00000442 <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	d8 2f       	mov	r29, r24
     448:	c6 2f       	mov	r28, r22
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER_1) {
     44a:	41 30       	cpi	r20, 0x01	; 1
     44c:	71 f0       	breq	.+28     	; 0x46a <update_square_colour+0x28>
		colour = MATRIX_COLOUR_P1;
	} else if (object == PLAYER_2) {
     44e:	42 30       	cpi	r20, 0x02	; 2
     450:	71 f0       	breq	.+28     	; 0x46e <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_P2;
	} else if (object == CURSOR) {
     452:	43 30       	cpi	r20, 0x03	; 3
     454:	31 f4       	brne	.+12     	; 0x462 <update_square_colour+0x20>
		if (get_picked() == 1) {
     456:	0e 94 a6 02 	call	0x54c	; 0x54c <get_picked>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	51 f4       	brne	.+20     	; 0x472 <update_square_colour+0x30>
			colour = COLOUR_YELLOW;
     45e:	4f ed       	ldi	r20, 0xDF	; 223
     460:	0b c0       	rjmp	.+22     	; 0x478 <update_square_colour+0x36>
		} else {
			colour = MATRIX_COLOUR_CURSOR;
		}

	} else if (object == LEGAL) {
     462:	45 30       	cpi	r20, 0x05	; 5
     464:	41 f4       	brne	.+16     	; 0x476 <update_square_colour+0x34>
		colour = MATRIX_COLOUR_LEGAL;
     466:	41 e1       	ldi	r20, 0x11	; 17
     468:	07 c0       	rjmp	.+14     	; 0x478 <update_square_colour+0x36>

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER_1) {
		colour = MATRIX_COLOUR_P1;
     46a:	40 ef       	ldi	r20, 0xF0	; 240
     46c:	05 c0       	rjmp	.+10     	; 0x478 <update_square_colour+0x36>
	} else if (object == PLAYER_2) {
		colour = MATRIX_COLOUR_P2;
     46e:	4f e0       	ldi	r20, 0x0F	; 15
     470:	03 c0       	rjmp	.+6      	; 0x478 <update_square_colour+0x36>
	} else if (object == CURSOR) {
		if (get_picked() == 1) {
			colour = COLOUR_YELLOW;
		} else {
			colour = MATRIX_COLOUR_CURSOR;
     472:	4c e3       	ldi	r20, 0x3C	; 60
     474:	01 c0       	rjmp	.+2      	; 0x478 <update_square_colour+0x36>

	} else if (object == LEGAL) {
		colour = MATRIX_COLOUR_LEGAL;
	} else {
		// anything unexpected will be black
		colour = MATRIX_COLOUR_EMPTY;
     476:	40 e0       	ldi	r20, 0x00	; 0
	}

	// update the pixel at the given location with this colour
	// the board is offset on the x axis to be centered on the LED matrix
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     478:	62 e0       	ldi	r22, 0x02	; 2
     47a:	6c 0f       	add	r22, r28
     47c:	85 e0       	ldi	r24, 0x05	; 5
     47e:	8d 0f       	add	r24, r29
     480:	0e 94 c8 0c 	call	0x1990	; 0x1990 <ledmatrix_update_pixel>
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <initialise_game>:
uint8_t y = 8;
int picked = 0;
void initialise_game(void) {
	
	// initialise the display we are using
	initialise_display();
     48a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <initialise_display>
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	14 c0       	rjmp	.+40     	; 0x4ba <initialise_game+0x30>
		for (uint8_t y = 0; y < HEIGHT; y++) {
			board[x][y] = EMPTY_SQUARE;
     492:	83 2f       	mov	r24, r19
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	e8 0f       	add	r30, r24
     4a2:	f9 1f       	adc	r31, r25
     4a4:	e4 5c       	subi	r30, 0xC4	; 196
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	e2 0f       	add	r30, r18
     4aa:	f1 1d       	adc	r31, r1
     4ac:	10 82       	st	Z, r1
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
		for (uint8_t y = 0; y < HEIGHT; y++) {
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <initialise_game+0x2a>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	25 30       	cpi	r18, 0x05	; 5
     4b6:	68 f3       	brcs	.-38     	; 0x492 <initialise_game+0x8>
	
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     4b8:	3f 5f       	subi	r19, 0xFF	; 255
     4ba:	35 30       	cpi	r19, 0x05	; 5
     4bc:	d0 f3       	brcs	.-12     	; 0x4b2 <initialise_game+0x28>
			board[x][y] = EMPTY_SQUARE;
		}
	}
	
	// set the starting player
	current_player = PLAYER_1;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <current_player>

	// also set where the cursor starts
	cursor_x = CURSOR_X_START;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <cursor_x>
	cursor_y = CURSOR_Y_START;
     4ca:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <cursor_y>
	cursor_visible = 0;
     4ce:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <cursor_visible>
	count = 0;
     4d2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <count>
     4d6:	08 95       	ret

000004d8 <get_piece_at>:
}

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	80 f4       	brcc	.+32     	; 0x4fc <get_piece_at+0x24>
     4dc:	65 30       	cpi	r22, 0x05	; 5
     4de:	80 f4       	brcc	.+32     	; 0x500 <get_piece_at+0x28>
		return EMPTY_SQUARE;
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	fc 01       	movw	r30, r24
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	e8 0f       	add	r30, r24
     4ee:	f9 1f       	adc	r31, r25
     4f0:	e4 5c       	subi	r30, 0xC4	; 196
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	e6 0f       	add	r30, r22
     4f6:	f1 1d       	adc	r31, r1
     4f8:	80 81       	ld	r24, Z
     4fa:	08 95       	ret

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
		return EMPTY_SQUARE;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	08 95       	ret
     500:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
	}
}
     502:	08 95       	ret

00000504 <flash_cursor>:

void flash_cursor(void) {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	if (cursor_visible) {
     508:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cursor_visible>
     50c:	88 23       	and	r24, r24
     50e:	71 f0       	breq	.+28     	; 0x52c <flash_cursor+0x28>
		// we need to flash the cursor off, it should be replaced by
		// the colour of the piece which is at that location
		uint8_t piece_at_cursor = get_piece_at(cursor_x, cursor_y);
     510:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <cursor_y>
     514:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <cursor_x>
     518:	6d 2f       	mov	r22, r29
     51a:	8c 2f       	mov	r24, r28
     51c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <get_piece_at>
		update_square_colour(cursor_x, cursor_y, piece_at_cursor);
     520:	48 2f       	mov	r20, r24
     522:	6d 2f       	mov	r22, r29
     524:	8c 2f       	mov	r24, r28
     526:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
     52a:	07 c0       	rjmp	.+14     	; 0x53a <flash_cursor+0x36>
		
	} else {
		update_square_colour(cursor_x, cursor_y, CURSOR);
     52c:	43 e0       	ldi	r20, 0x03	; 3
     52e:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <cursor_y>
     532:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     536:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	cursor_visible = 1 - cursor_visible; //alternate between 0 and 1
     53a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <cursor_visible>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	89 1b       	sub	r24, r25
     542:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cursor_visible>
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <get_picked>:
uint8_t get_picked(void) {
	return picked;
}
     54c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <picked>
     550:	08 95       	ret

00000552 <change_player>:
void change_player(void) {
	if (current_player == PLAYER_1) {
     552:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <current_player>
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	01 f5       	brne	.+64     	; 0x59a <change_player+0x48>
		move_terminal_cursor(30,7);
     55a:	67 e0       	ldi	r22, 0x07	; 7
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	8e e1       	ldi	r24, 0x1E	; 30
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
		printf_P(PSTR("                          "));
     566:	89 ec       	ldi	r24, 0xC9	; 201
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
		move_terminal_cursor(30,7);
     572:	67 e0       	ldi	r22, 0x07	; 7
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8e e1       	ldi	r24, 0x1E	; 30
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
		printf_P(PSTR("Current Player: 2 (red)"));
     57e:	81 eb       	ldi	r24, 0xB1	; 177
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
		current_player = PLAYER_2;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <current_player>
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	08 95       	ret
	} else {
		move_terminal_cursor(30,7);
     59a:	67 e0       	ldi	r22, 0x07	; 7
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	8e e1       	ldi	r24, 0x1E	; 30
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
		printf_P(PSTR("                          "));
     5a6:	86 e9       	ldi	r24, 0x96	; 150
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
		move_terminal_cursor(30,7);
     5b2:	67 e0       	ldi	r22, 0x07	; 7
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	8e e1       	ldi	r24, 0x1E	; 30
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
		printf_P(PSTR("Current Player: 1 (green)"));
     5be:	8c e7       	ldi	r24, 0x7C	; 124
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
		current_player = PLAYER_1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <current_player>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	08 95       	ret

000005da <check_empty>:
	}
}

 bool check_empty(void) {
	if (board[cursor_x][cursor_y] == EMPTY_SQUARE) {
     5da:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     5de:	08 2e       	mov	r0, r24
     5e0:	00 0c       	add	r0, r0
     5e2:	99 0b       	sbc	r25, r25
     5e4:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <cursor_y>
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	e8 0f       	add	r30, r24
     5f4:	f9 1f       	adc	r31, r25
     5f6:	e4 5c       	subi	r30, 0xC4	; 196
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	e2 0f       	add	r30, r18
     5fc:	f1 1d       	adc	r31, r1
     5fe:	27 fd       	sbrc	r18, 7
     600:	fa 95       	dec	r31
     602:	80 81       	ld	r24, Z
     604:	81 11       	cpse	r24, r1
     606:	02 c0       	rjmp	.+4      	; 0x60c <check_empty+0x32>
		return true;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret
	} else if (board[cursor_x][cursor_y] == board[x][y]) {
		return false;
     60c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return false;
}
     60e:	08 95       	ret

00000610 <make_legal>:

void make_legal(void) {
	if (board[x+1][y] == EMPTY_SQUARE && x+1 < 5) {
     610:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	2f 5f       	subi	r18, 0xFF	; 255
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     620:	46 2f       	mov	r20, r22
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e2 0f       	add	r30, r18
     630:	f3 1f       	adc	r31, r19
     632:	e4 5c       	subi	r30, 0xC4	; 196
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	e4 0f       	add	r30, r20
     638:	f5 1f       	adc	r31, r21
     63a:	90 81       	ld	r25, Z
     63c:	91 11       	cpse	r25, r1
     63e:	15 c0       	rjmp	.+42     	; 0x66a <make_legal+0x5a>
     640:	25 30       	cpi	r18, 0x05	; 5
     642:	31 05       	cpc	r19, r1
     644:	94 f4       	brge	.+36     	; 0x66a <make_legal+0x5a>
		board[x+1][y] = LEGAL;
     646:	f9 01       	movw	r30, r18
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	2e 0f       	add	r18, r30
     652:	3f 1f       	adc	r19, r31
     654:	24 5c       	subi	r18, 0xC4	; 196
     656:	3e 4f       	sbci	r19, 0xFE	; 254
     658:	f9 01       	movw	r30, r18
     65a:	e4 0f       	add	r30, r20
     65c:	f5 1f       	adc	r31, r21
     65e:	95 e0       	ldi	r25, 0x05	; 5
     660:	90 83       	st	Z, r25
		update_square_colour(x+1, y, LEGAL);
     662:	45 e0       	ldi	r20, 0x05	; 5
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y] == EMPTY_SQUARE && x-1 > -1) {
     66a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     66e:	28 2f       	mov	r18, r24
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	21 50       	subi	r18, 0x01	; 1
     674:	31 09       	sbc	r19, r1
     676:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     67a:	46 2f       	mov	r20, r22
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	f9 01       	movw	r30, r18
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	e2 0f       	add	r30, r18
     68a:	f3 1f       	adc	r31, r19
     68c:	e4 5c       	subi	r30, 0xC4	; 196
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	e4 0f       	add	r30, r20
     692:	f5 1f       	adc	r31, r21
     694:	90 81       	ld	r25, Z
     696:	91 11       	cpse	r25, r1
     698:	14 c0       	rjmp	.+40     	; 0x6c2 <make_legal+0xb2>
     69a:	33 23       	and	r19, r19
     69c:	94 f0       	brlt	.+36     	; 0x6c2 <make_legal+0xb2>
		board[x-1][y] = LEGAL;
     69e:	f9 01       	movw	r30, r18
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	2e 0f       	add	r18, r30
     6aa:	3f 1f       	adc	r19, r31
     6ac:	24 5c       	subi	r18, 0xC4	; 196
     6ae:	3e 4f       	sbci	r19, 0xFE	; 254
     6b0:	f9 01       	movw	r30, r18
     6b2:	e4 0f       	add	r30, r20
     6b4:	f5 1f       	adc	r31, r21
     6b6:	95 e0       	ldi	r25, 0x05	; 5
     6b8:	90 83       	st	Z, r25
		update_square_colour(x-1, y, LEGAL);
     6ba:	45 e0       	ldi	r20, 0x05	; 5
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x+1][y+1] == EMPTY_SQUARE && x+1 < 5 && y+1 < 5) {
     6c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	3f 4f       	sbci	r19, 0xFF	; 255
     6ce:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d2:	46 2f       	mov	r20, r22
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	4f 5f       	subi	r20, 0xFF	; 255
     6d8:	5f 4f       	sbci	r21, 0xFF	; 255
     6da:	f9 01       	movw	r30, r18
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e2 0f       	add	r30, r18
     6e6:	f3 1f       	adc	r31, r19
     6e8:	e4 5c       	subi	r30, 0xC4	; 196
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	e4 0f       	add	r30, r20
     6ee:	f5 1f       	adc	r31, r21
     6f0:	90 81       	ld	r25, Z
     6f2:	91 11       	cpse	r25, r1
     6f4:	19 c0       	rjmp	.+50     	; 0x728 <make_legal+0x118>
     6f6:	25 30       	cpi	r18, 0x05	; 5
     6f8:	31 05       	cpc	r19, r1
     6fa:	b4 f4       	brge	.+44     	; 0x728 <make_legal+0x118>
     6fc:	45 30       	cpi	r20, 0x05	; 5
     6fe:	51 05       	cpc	r21, r1
     700:	9c f4       	brge	.+38     	; 0x728 <make_legal+0x118>
		board[x+1][y+1] = LEGAL;
     702:	f9 01       	movw	r30, r18
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	2e 0f       	add	r18, r30
     70e:	3f 1f       	adc	r19, r31
     710:	24 5c       	subi	r18, 0xC4	; 196
     712:	3e 4f       	sbci	r19, 0xFE	; 254
     714:	f9 01       	movw	r30, r18
     716:	e4 0f       	add	r30, r20
     718:	f5 1f       	adc	r31, r21
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	90 83       	st	Z, r25
		update_square_colour(x+1, y+1, LEGAL);
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	45 e0       	ldi	r20, 0x05	; 5
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x+1][y-1] == EMPTY_SQUARE && x+1 < 5 && y-1 > -1) {
     728:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     738:	46 2f       	mov	r20, r22
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	41 50       	subi	r20, 0x01	; 1
     73e:	51 09       	sbc	r21, r1
     740:	f9 01       	movw	r30, r18
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	e2 0f       	add	r30, r18
     74c:	f3 1f       	adc	r31, r19
     74e:	e4 5c       	subi	r30, 0xC4	; 196
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	e4 0f       	add	r30, r20
     754:	f5 1f       	adc	r31, r21
     756:	90 81       	ld	r25, Z
     758:	91 11       	cpse	r25, r1
     75a:	18 c0       	rjmp	.+48     	; 0x78c <make_legal+0x17c>
     75c:	25 30       	cpi	r18, 0x05	; 5
     75e:	31 05       	cpc	r19, r1
     760:	ac f4       	brge	.+42     	; 0x78c <make_legal+0x17c>
     762:	55 23       	and	r21, r21
     764:	9c f0       	brlt	.+38     	; 0x78c <make_legal+0x17c>
		board[x+1][y-1] = LEGAL;
     766:	f9 01       	movw	r30, r18
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	2e 0f       	add	r18, r30
     772:	3f 1f       	adc	r19, r31
     774:	24 5c       	subi	r18, 0xC4	; 196
     776:	3e 4f       	sbci	r19, 0xFE	; 254
     778:	f9 01       	movw	r30, r18
     77a:	e4 0f       	add	r30, r20
     77c:	f5 1f       	adc	r31, r21
     77e:	95 e0       	ldi	r25, 0x05	; 5
     780:	90 83       	st	Z, r25
		update_square_colour(x+1, y-1, LEGAL);
     782:	61 50       	subi	r22, 0x01	; 1
     784:	45 e0       	ldi	r20, 0x05	; 5
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x][y+1] == EMPTY_SQUARE && y+1 < 5) {
     78c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     790:	48 2f       	mov	r20, r24
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     798:	26 2f       	mov	r18, r22
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	fa 01       	movw	r30, r20
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	e4 0f       	add	r30, r20
     7ac:	f5 1f       	adc	r31, r21
     7ae:	e4 5c       	subi	r30, 0xC4	; 196
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	e2 0f       	add	r30, r18
     7b4:	f3 1f       	adc	r31, r19
     7b6:	90 81       	ld	r25, Z
     7b8:	91 11       	cpse	r25, r1
     7ba:	15 c0       	rjmp	.+42     	; 0x7e6 <make_legal+0x1d6>
     7bc:	25 30       	cpi	r18, 0x05	; 5
     7be:	31 05       	cpc	r19, r1
     7c0:	94 f4       	brge	.+36     	; 0x7e6 <make_legal+0x1d6>
		board[x][y+1] = LEGAL;
     7c2:	fa 01       	movw	r30, r20
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	4e 0f       	add	r20, r30
     7ce:	5f 1f       	adc	r21, r31
     7d0:	44 5c       	subi	r20, 0xC4	; 196
     7d2:	5e 4f       	sbci	r21, 0xFE	; 254
     7d4:	fa 01       	movw	r30, r20
     7d6:	e2 0f       	add	r30, r18
     7d8:	f3 1f       	adc	r31, r19
     7da:	95 e0       	ldi	r25, 0x05	; 5
     7dc:	90 83       	st	Z, r25
		update_square_colour(x, y+1, LEGAL);
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	45 e0       	ldi	r20, 0x05	; 5
     7e2:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x][y-1] == EMPTY_SQUARE && y-1 > -1) {
     7e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     7ea:	48 2f       	mov	r20, r24
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f2:	26 2f       	mov	r18, r22
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	31 09       	sbc	r19, r1
     7fa:	fa 01       	movw	r30, r20
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e4 0f       	add	r30, r20
     806:	f5 1f       	adc	r31, r21
     808:	e4 5c       	subi	r30, 0xC4	; 196
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	e2 0f       	add	r30, r18
     80e:	f3 1f       	adc	r31, r19
     810:	90 81       	ld	r25, Z
     812:	91 11       	cpse	r25, r1
     814:	14 c0       	rjmp	.+40     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     816:	33 23       	and	r19, r19
     818:	94 f0       	brlt	.+36     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		board[x][y-1] = LEGAL;
     81a:	fa 01       	movw	r30, r20
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	ee 0f       	add	r30, r30
     822:	ff 1f       	adc	r31, r31
     824:	4e 0f       	add	r20, r30
     826:	5f 1f       	adc	r21, r31
     828:	44 5c       	subi	r20, 0xC4	; 196
     82a:	5e 4f       	sbci	r21, 0xFE	; 254
     82c:	fa 01       	movw	r30, r20
     82e:	e2 0f       	add	r30, r18
     830:	f3 1f       	adc	r31, r19
     832:	95 e0       	ldi	r25, 0x05	; 5
     834:	90 83       	st	Z, r25
		update_square_colour(x, y-1, LEGAL);
     836:	61 50       	subi	r22, 0x01	; 1
     838:	45 e0       	ldi	r20, 0x05	; 5
     83a:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y+1] == EMPTY_SQUARE && x-1 > -1 && y+1 < 5) {
     83e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     842:	28 2f       	mov	r18, r24
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	21 50       	subi	r18, 0x01	; 1
     848:	31 09       	sbc	r19, r1
     84a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     84e:	46 2f       	mov	r20, r22
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	4f 5f       	subi	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	f9 01       	movw	r30, r18
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	e2 0f       	add	r30, r18
     862:	f3 1f       	adc	r31, r19
     864:	e4 5c       	subi	r30, 0xC4	; 196
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	e4 0f       	add	r30, r20
     86a:	f5 1f       	adc	r31, r21
     86c:	90 81       	ld	r25, Z
     86e:	91 11       	cpse	r25, r1
     870:	18 c0       	rjmp	.+48     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     872:	33 23       	and	r19, r19
     874:	b4 f0       	brlt	.+44     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     876:	45 30       	cpi	r20, 0x05	; 5
     878:	51 05       	cpc	r21, r1
     87a:	9c f4       	brge	.+38     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
		board[x-1][y+1] = LEGAL;
     87c:	f9 01       	movw	r30, r18
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	2e 0f       	add	r18, r30
     888:	3f 1f       	adc	r19, r31
     88a:	24 5c       	subi	r18, 0xC4	; 196
     88c:	3e 4f       	sbci	r19, 0xFE	; 254
     88e:	f9 01       	movw	r30, r18
     890:	e4 0f       	add	r30, r20
     892:	f5 1f       	adc	r31, r21
     894:	95 e0       	ldi	r25, 0x05	; 5
     896:	90 83       	st	Z, r25
		update_square_colour(x-1, y+1, LEGAL);
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	45 e0       	ldi	r20, 0x05	; 5
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y-1] == EMPTY_SQUARE && x-1 > -1 && y-1 > -1) {
     8a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     8a6:	28 2f       	mov	r18, r24
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	31 09       	sbc	r19, r1
     8ae:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8b2:	46 2f       	mov	r20, r22
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	41 50       	subi	r20, 0x01	; 1
     8b8:	51 09       	sbc	r21, r1
     8ba:	f9 01       	movw	r30, r18
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e2 0f       	add	r30, r18
     8c6:	f3 1f       	adc	r31, r19
     8c8:	e4 5c       	subi	r30, 0xC4	; 196
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	e4 0f       	add	r30, r20
     8ce:	f5 1f       	adc	r31, r21
     8d0:	90 81       	ld	r25, Z
     8d2:	91 11       	cpse	r25, r1
     8d4:	17 c0       	rjmp	.+46     	; 0x904 <__stack+0x5>
     8d6:	33 23       	and	r19, r19
     8d8:	ac f0       	brlt	.+42     	; 0x904 <__stack+0x5>
     8da:	55 23       	and	r21, r21
     8dc:	9c f0       	brlt	.+38     	; 0x904 <__stack+0x5>
		board[x-1][y-1] = LEGAL;
     8de:	f9 01       	movw	r30, r18
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	2e 0f       	add	r18, r30
     8ea:	3f 1f       	adc	r19, r31
     8ec:	24 5c       	subi	r18, 0xC4	; 196
     8ee:	3e 4f       	sbci	r19, 0xFE	; 254
     8f0:	f9 01       	movw	r30, r18
     8f2:	e4 0f       	add	r30, r20
     8f4:	f5 1f       	adc	r31, r21
     8f6:	95 e0       	ldi	r25, 0x05	; 5
     8f8:	90 83       	st	Z, r25
		update_square_colour(x-1, y-1, LEGAL);
     8fa:	61 50       	subi	r22, 0x01	; 1
     8fc:	45 e0       	ldi	r20, 0x05	; 5
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
     904:	08 95       	ret

00000906 <remove_legal>:
	}	
}
void remove_legal(void) {
	if (board[x+1][y] == LEGAL) {
     906:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     916:	46 2f       	mov	r20, r22
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	e2 0f       	add	r30, r18
     926:	f3 1f       	adc	r31, r19
     928:	e4 5c       	subi	r30, 0xC4	; 196
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	e4 0f       	add	r30, r20
     92e:	f5 1f       	adc	r31, r21
     930:	90 81       	ld	r25, Z
     932:	95 30       	cpi	r25, 0x05	; 5
     934:	89 f4       	brne	.+34     	; 0x958 <remove_legal+0x52>
		board[x+1][y] = EMPTY_SQUARE;
     936:	f9 01       	movw	r30, r18
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	2e 0f       	add	r18, r30
     942:	3f 1f       	adc	r19, r31
     944:	24 5c       	subi	r18, 0xC4	; 196
     946:	3e 4f       	sbci	r19, 0xFE	; 254
     948:	f9 01       	movw	r30, r18
     94a:	e4 0f       	add	r30, r20
     94c:	f5 1f       	adc	r31, r21
     94e:	10 82       	st	Z, r1
		update_square_colour(x+1, y, EMPTY_SQUARE);
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	8f 5f       	subi	r24, 0xFF	; 255
     954:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y] == LEGAL) {
     958:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	21 50       	subi	r18, 0x01	; 1
     962:	31 09       	sbc	r19, r1
     964:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     968:	46 2f       	mov	r20, r22
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e2 0f       	add	r30, r18
     978:	f3 1f       	adc	r31, r19
     97a:	e4 5c       	subi	r30, 0xC4	; 196
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	e4 0f       	add	r30, r20
     980:	f5 1f       	adc	r31, r21
     982:	90 81       	ld	r25, Z
     984:	95 30       	cpi	r25, 0x05	; 5
     986:	89 f4       	brne	.+34     	; 0x9aa <remove_legal+0xa4>
		board[x-1][y] = EMPTY_SQUARE;
     988:	f9 01       	movw	r30, r18
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	2e 0f       	add	r18, r30
     994:	3f 1f       	adc	r19, r31
     996:	24 5c       	subi	r18, 0xC4	; 196
     998:	3e 4f       	sbci	r19, 0xFE	; 254
     99a:	f9 01       	movw	r30, r18
     99c:	e4 0f       	add	r30, r20
     99e:	f5 1f       	adc	r31, r21
     9a0:	10 82       	st	Z, r1
		update_square_colour(x-1, y, EMPTY_SQUARE);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	81 50       	subi	r24, 0x01	; 1
     9a6:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x+1][y+1] == LEGAL) {
     9aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9ba:	46 2f       	mov	r20, r22
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	4f 5f       	subi	r20, 0xFF	; 255
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
     9c2:	f9 01       	movw	r30, r18
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	e2 0f       	add	r30, r18
     9ce:	f3 1f       	adc	r31, r19
     9d0:	e4 5c       	subi	r30, 0xC4	; 196
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	e4 0f       	add	r30, r20
     9d6:	f5 1f       	adc	r31, r21
     9d8:	90 81       	ld	r25, Z
     9da:	95 30       	cpi	r25, 0x05	; 5
     9dc:	91 f4       	brne	.+36     	; 0xa02 <remove_legal+0xfc>
		board[x+1][y+1] = EMPTY_SQUARE;
     9de:	f9 01       	movw	r30, r18
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	2e 0f       	add	r18, r30
     9ea:	3f 1f       	adc	r19, r31
     9ec:	24 5c       	subi	r18, 0xC4	; 196
     9ee:	3e 4f       	sbci	r19, 0xFE	; 254
     9f0:	f9 01       	movw	r30, r18
     9f2:	e4 0f       	add	r30, r20
     9f4:	f5 1f       	adc	r31, r21
     9f6:	10 82       	st	Z, r1
		update_square_colour(x+1, y+1, EMPTY_SQUARE);
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x+1][y-1] == LEGAL) {
     a02:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a12:	46 2f       	mov	r20, r22
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	41 50       	subi	r20, 0x01	; 1
     a18:	51 09       	sbc	r21, r1
     a1a:	f9 01       	movw	r30, r18
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	e2 0f       	add	r30, r18
     a26:	f3 1f       	adc	r31, r19
     a28:	e4 5c       	subi	r30, 0xC4	; 196
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	e4 0f       	add	r30, r20
     a2e:	f5 1f       	adc	r31, r21
     a30:	90 81       	ld	r25, Z
     a32:	95 30       	cpi	r25, 0x05	; 5
     a34:	91 f4       	brne	.+36     	; 0xa5a <remove_legal+0x154>
		board[x+1][y-1] = EMPTY_SQUARE;
     a36:	f9 01       	movw	r30, r18
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	2e 0f       	add	r18, r30
     a42:	3f 1f       	adc	r19, r31
     a44:	24 5c       	subi	r18, 0xC4	; 196
     a46:	3e 4f       	sbci	r19, 0xFE	; 254
     a48:	f9 01       	movw	r30, r18
     a4a:	e4 0f       	add	r30, r20
     a4c:	f5 1f       	adc	r31, r21
     a4e:	10 82       	st	Z, r1
		update_square_colour(x+1, y-1, EMPTY_SQUARE);
     a50:	61 50       	subi	r22, 0x01	; 1
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x][y+1] == LEGAL) {
     a5a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     a5e:	48 2f       	mov	r20, r24
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a66:	26 2f       	mov	r18, r22
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	fa 01       	movw	r30, r20
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	e4 0f       	add	r30, r20
     a7a:	f5 1f       	adc	r31, r21
     a7c:	e4 5c       	subi	r30, 0xC4	; 196
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	e2 0f       	add	r30, r18
     a82:	f3 1f       	adc	r31, r19
     a84:	90 81       	ld	r25, Z
     a86:	95 30       	cpi	r25, 0x05	; 5
     a88:	89 f4       	brne	.+34     	; 0xaac <remove_legal+0x1a6>
		board[x][y+1] = EMPTY_SQUARE;
     a8a:	fa 01       	movw	r30, r20
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	4e 0f       	add	r20, r30
     a96:	5f 1f       	adc	r21, r31
     a98:	44 5c       	subi	r20, 0xC4	; 196
     a9a:	5e 4f       	sbci	r21, 0xFE	; 254
     a9c:	fa 01       	movw	r30, r20
     a9e:	e2 0f       	add	r30, r18
     aa0:	f3 1f       	adc	r31, r19
     aa2:	10 82       	st	Z, r1
		update_square_colour(x, y+1, EMPTY_SQUARE);
     aa4:	6f 5f       	subi	r22, 0xFF	; 255
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x][y-1] == LEGAL) {
     aac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     ab0:	48 2f       	mov	r20, r24
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab8:	26 2f       	mov	r18, r22
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	31 09       	sbc	r19, r1
     ac0:	fa 01       	movw	r30, r20
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e4 0f       	add	r30, r20
     acc:	f5 1f       	adc	r31, r21
     ace:	e4 5c       	subi	r30, 0xC4	; 196
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	e2 0f       	add	r30, r18
     ad4:	f3 1f       	adc	r31, r19
     ad6:	90 81       	ld	r25, Z
     ad8:	95 30       	cpi	r25, 0x05	; 5
     ada:	89 f4       	brne	.+34     	; 0xafe <remove_legal+0x1f8>
		board[x][y-1] = EMPTY_SQUARE;
     adc:	fa 01       	movw	r30, r20
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	4e 0f       	add	r20, r30
     ae8:	5f 1f       	adc	r21, r31
     aea:	44 5c       	subi	r20, 0xC4	; 196
     aec:	5e 4f       	sbci	r21, 0xFE	; 254
     aee:	fa 01       	movw	r30, r20
     af0:	e2 0f       	add	r30, r18
     af2:	f3 1f       	adc	r31, r19
     af4:	10 82       	st	Z, r1
		update_square_colour(x, y-1, EMPTY_SQUARE);
     af6:	61 50       	subi	r22, 0x01	; 1
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y+1] == LEGAL) {
     afe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	31 09       	sbc	r19, r1
     b0a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b0e:	46 2f       	mov	r20, r22
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	4f 5f       	subi	r20, 0xFF	; 255
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	f9 01       	movw	r30, r18
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	e2 0f       	add	r30, r18
     b22:	f3 1f       	adc	r31, r19
     b24:	e4 5c       	subi	r30, 0xC4	; 196
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	e4 0f       	add	r30, r20
     b2a:	f5 1f       	adc	r31, r21
     b2c:	90 81       	ld	r25, Z
     b2e:	95 30       	cpi	r25, 0x05	; 5
     b30:	91 f4       	brne	.+36     	; 0xb56 <remove_legal+0x250>
		board[x-1][y+1] = EMPTY_SQUARE;
     b32:	f9 01       	movw	r30, r18
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	2e 0f       	add	r18, r30
     b3e:	3f 1f       	adc	r19, r31
     b40:	24 5c       	subi	r18, 0xC4	; 196
     b42:	3e 4f       	sbci	r19, 0xFE	; 254
     b44:	f9 01       	movw	r30, r18
     b46:	e4 0f       	add	r30, r20
     b48:	f5 1f       	adc	r31, r21
     b4a:	10 82       	st	Z, r1
		update_square_colour(x-1, y+1, EMPTY_SQUARE);
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	81 50       	subi	r24, 0x01	; 1
     b52:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	}
	if (board[x-1][y-1] == LEGAL) {
     b56:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	31 09       	sbc	r19, r1
     b62:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b66:	46 2f       	mov	r20, r22
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	41 50       	subi	r20, 0x01	; 1
     b6c:	51 09       	sbc	r21, r1
     b6e:	f9 01       	movw	r30, r18
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e2 0f       	add	r30, r18
     b7a:	f3 1f       	adc	r31, r19
     b7c:	e4 5c       	subi	r30, 0xC4	; 196
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	e4 0f       	add	r30, r20
     b82:	f5 1f       	adc	r31, r21
     b84:	90 81       	ld	r25, Z
     b86:	95 30       	cpi	r25, 0x05	; 5
     b88:	91 f4       	brne	.+36     	; 0xbae <remove_legal+0x2a8>
		board[x-1][y-1] = EMPTY_SQUARE;
     b8a:	f9 01       	movw	r30, r18
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	2e 0f       	add	r18, r30
     b96:	3f 1f       	adc	r19, r31
     b98:	24 5c       	subi	r18, 0xC4	; 196
     b9a:	3e 4f       	sbci	r19, 0xFE	; 254
     b9c:	f9 01       	movw	r30, r18
     b9e:	e4 0f       	add	r30, r20
     ba0:	f5 1f       	adc	r31, r21
     ba2:	10 82       	st	Z, r1
		update_square_colour(x-1, y-1, EMPTY_SQUARE);
     ba4:	61 50       	subi	r22, 0x01	; 1
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	81 50       	subi	r24, 0x01	; 1
     baa:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
     bae:	08 95       	ret

00000bb0 <Check_LEGAL>:
	}
}

bool Check_LEGAL(void) {
	if(board[cursor_x][cursor_y] == LEGAL) {
     bb0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     bb4:	08 2e       	mov	r0, r24
     bb6:	00 0c       	add	r0, r0
     bb8:	99 0b       	sbc	r25, r25
     bba:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <cursor_y>
     bbe:	fc 01       	movw	r30, r24
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e8 0f       	add	r30, r24
     bca:	f9 1f       	adc	r31, r25
     bcc:	e4 5c       	subi	r30, 0xC4	; 196
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	e2 0f       	add	r30, r18
     bd2:	f1 1d       	adc	r31, r1
     bd4:	27 fd       	sbrc	r18, 7
     bd6:	fa 95       	dec	r31
     bd8:	80 81       	ld	r24, Z
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <Check_LEGAL+0x32>
		return true;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	08 95       	ret
	} else {
		return false;
     be2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return false;
}
     be4:	08 95       	ret

00000be6 <place_piece>:

void place_piece(void) {
	if (check_empty() == true && count < 8 && board[cursor_x][cursor_y] != PREVIOUS) {
     be6:	0e 94 ed 02 	call	0x5da	; 0x5da <check_empty>
     bea:	88 23       	and	r24, r24
     bec:	09 f4       	brne	.+2      	; 0xbf0 <place_piece+0xa>
     bee:	47 c0       	rjmp	.+142    	; 0xc7e <place_piece+0x98>
     bf0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count>
     bf4:	88 30       	cpi	r24, 0x08	; 8
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <place_piece+0x14>
     bf8:	42 c0       	rjmp	.+132    	; 0xc7e <place_piece+0x98>
     bfa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     bfe:	28 2f       	mov	r18, r24
     c00:	08 2e       	mov	r0, r24
     c02:	00 0c       	add	r0, r0
     c04:	33 0b       	sbc	r19, r19
     c06:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <cursor_y>
     c0a:	a6 2f       	mov	r26, r22
     c0c:	06 2e       	mov	r0, r22
     c0e:	00 0c       	add	r0, r0
     c10:	bb 0b       	sbc	r27, r27
     c12:	f9 01       	movw	r30, r18
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	e4 5c       	subi	r30, 0xC4	; 196
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	ea 0f       	add	r30, r26
     c26:	fb 1f       	adc	r31, r27
     c28:	90 81       	ld	r25, Z
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	41 f1       	breq	.+80     	; 0xc7e <place_piece+0x98>
		board[cursor_x][cursor_y] = current_player;
     c2e:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <current_player>
     c32:	f9 01       	movw	r30, r18
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	2e 0f       	add	r18, r30
     c3e:	3f 1f       	adc	r19, r31
     c40:	24 5c       	subi	r18, 0xC4	; 196
     c42:	3e 4f       	sbci	r19, 0xFE	; 254
     c44:	a2 0f       	add	r26, r18
     c46:	b3 1f       	adc	r27, r19
     c48:	4c 93       	st	X, r20
		update_square_colour(cursor_x, cursor_y, current_player);
     c4a:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
		change_player();
     c4e:	0e 94 a9 02 	call	0x552	; 0x552 <change_player>
		board[x][y] = EMPTY_SQUARE;
     c52:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c5c:	fc 01       	movw	r30, r24
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	e4 5c       	subi	r30, 0xC4	; 196
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	e2 0f       	add	r30, r18
     c70:	f1 1d       	adc	r31, r1
     c72:	10 82       	st	Z, r1
		count+=1;
     c74:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count>
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <count>
	}
	if (count >= 8 && board[cursor_x][cursor_y] == current_player && picked == 0) {
     c7e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count>
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	e0 f1       	brcs	.+120    	; 0xcfe <place_piece+0x118>
     c86:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <cursor_x>
     c8a:	85 2f       	mov	r24, r21
     c8c:	05 2e       	mov	r0, r21
     c8e:	00 0c       	add	r0, r0
     c90:	99 0b       	sbc	r25, r25
     c92:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <cursor_y>
     c96:	24 2f       	mov	r18, r20
     c98:	04 2e       	mov	r0, r20
     c9a:	00 0c       	add	r0, r0
     c9c:	33 0b       	sbc	r19, r19
     c9e:	fc 01       	movw	r30, r24
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	e8 0f       	add	r30, r24
     caa:	f9 1f       	adc	r31, r25
     cac:	e4 5c       	subi	r30, 0xC4	; 196
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	e2 0f       	add	r30, r18
     cb2:	f3 1f       	adc	r31, r19
     cb4:	70 81       	ld	r23, Z
     cb6:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <current_player>
     cba:	76 13       	cpse	r23, r22
     cbc:	20 c0       	rjmp	.+64     	; 0xcfe <place_piece+0x118>
     cbe:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <picked>
     cc2:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <picked+0x1>
     cc6:	67 2b       	or	r22, r23
     cc8:	d1 f4       	brne	.+52     	; 0xcfe <place_piece+0x118>
		x = cursor_x;
     cca:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <x>
		y = cursor_y;
     cce:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
		board[cursor_x][cursor_y] = PREVIOUS;
     cd2:	ac 01       	movw	r20, r24
     cd4:	44 0f       	add	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	84 0f       	add	r24, r20
     cde:	95 1f       	adc	r25, r21
     ce0:	84 5c       	subi	r24, 0xC4	; 196
     ce2:	9e 4f       	sbci	r25, 0xFE	; 254
     ce4:	fc 01       	movw	r30, r24
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	24 e0       	ldi	r18, 0x04	; 4
     cec:	20 83       	st	Z, r18
		picked = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <picked+0x1>
     cf6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <picked>
		make_legal();
     cfa:	0e 94 08 03 	call	0x610	; 0x610 <make_legal>
	}
	if (board[cursor_x][cursor_y] == LEGAL) {
     cfe:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     d02:	28 2f       	mov	r18, r24
     d04:	08 2e       	mov	r0, r24
     d06:	00 0c       	add	r0, r0
     d08:	33 0b       	sbc	r19, r19
     d0a:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <cursor_y>
     d0e:	a6 2f       	mov	r26, r22
     d10:	06 2e       	mov	r0, r22
     d12:	00 0c       	add	r0, r0
     d14:	bb 0b       	sbc	r27, r27
     d16:	f9 01       	movw	r30, r18
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	e2 0f       	add	r30, r18
     d22:	f3 1f       	adc	r31, r19
     d24:	e4 5c       	subi	r30, 0xC4	; 196
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	ea 0f       	add	r30, r26
     d2a:	fb 1f       	adc	r31, r27
     d2c:	90 81       	ld	r25, Z
     d2e:	95 30       	cpi	r25, 0x05	; 5
     d30:	49 f5       	brne	.+82     	; 0xd84 <place_piece+0x19e>
		board[cursor_x][cursor_y] = current_player;
     d32:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <current_player>
     d36:	f9 01       	movw	r30, r18
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	2e 0f       	add	r18, r30
     d42:	3f 1f       	adc	r19, r31
     d44:	24 5c       	subi	r18, 0xC4	; 196
     d46:	3e 4f       	sbci	r19, 0xFE	; 254
     d48:	a2 0f       	add	r26, r18
     d4a:	b3 1f       	adc	r27, r19
     d4c:	4c 93       	st	X, r20
		picked = 0;
     d4e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <picked+0x1>
     d52:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <picked>
		update_square_colour(cursor_x, cursor_y, current_player);
     d56:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
		change_player();
     d5a:	0e 94 a9 02 	call	0x552	; 0x552 <change_player>
		board[x][y] = EMPTY_SQUARE;
     d5e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d68:	fc 01       	movw	r30, r24
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	e4 5c       	subi	r30, 0xC4	; 196
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	e2 0f       	add	r30, r18
     d7c:	f1 1d       	adc	r31, r1
     d7e:	10 82       	st	Z, r1
		remove_legal();
     d80:	0e 94 83 04 	call	0x906	; 0x906 <remove_legal>
     d84:	08 95       	ret

00000d86 <move_display_cursor>:
	}
}

//check the header file game.h for a description of what this function should do
// (it may contain some hints as to how to move the cursor)
void move_display_cursor(int8_t dx, int8_t dy) {
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	08 2f       	mov	r16, r24
     d90:	16 2f       	mov	r17, r22
	 *		consider what should happen if the cursor moves off the board.
	 * 3: display the cursor at the new location
	 * 4: reset the cursor flashing cycle. See project.c for how the cursor
	 *		is flashed.
	 */
	uint8_t piece_at_cursor = get_piece_at(cursor_x, cursor_y);
     d92:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <cursor_y>
     d96:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <cursor_x>
     d9a:	6d 2f       	mov	r22, r29
     d9c:	8c 2f       	mov	r24, r28
     d9e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <get_piece_at>
	update_square_colour(cursor_x, cursor_y, piece_at_cursor);
     da2:	48 2f       	mov	r20, r24
     da4:	6d 2f       	mov	r22, r29
     da6:	8c 2f       	mov	r24, r28
     da8:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
	cursor_x += dx;
     dac:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     db0:	80 0f       	add	r24, r16
     db2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <cursor_x>
	cursor_y += dy;
     db6:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <cursor_y>
     dba:	61 0f       	add	r22, r17
     dbc:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <cursor_y>
	if (cursor_x == 5) {
     dc0:	85 30       	cpi	r24, 0x05	; 5
     dc2:	19 f4       	brne	.+6      	; 0xdca <move_display_cursor+0x44>
		cursor_x = 0;
     dc4:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <cursor_x>
     dc8:	10 c0       	rjmp	.+32     	; 0xdea <move_display_cursor+0x64>
	} else if (cursor_y == 5) {
     dca:	65 30       	cpi	r22, 0x05	; 5
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <move_display_cursor+0x4e>
		cursor_y = 0;
     dce:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <cursor_y>
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <move_display_cursor+0x64>
	} else if (cursor_x == -1) {
     dd4:	8f 3f       	cpi	r24, 0xFF	; 255
     dd6:	21 f4       	brne	.+8      	; 0xde0 <move_display_cursor+0x5a>
		cursor_x = 4;
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <cursor_x>
     dde:	05 c0       	rjmp	.+10     	; 0xdea <move_display_cursor+0x64>
	} else if (cursor_y == -1) {
     de0:	6f 3f       	cpi	r22, 0xFF	; 255
     de2:	19 f4       	brne	.+6      	; 0xdea <move_display_cursor+0x64>
		cursor_y = 4;
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <cursor_y>
	}
	update_square_colour(cursor_x, cursor_y, CURSOR);
     dea:	43 e0       	ldi	r20, 0x03	; 3
     dec:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <cursor_y>
     df0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_x>
     df4:	0e 94 21 02 	call	0x442	; 0x442 <update_square_colour>
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <check_horizontal>:
// check player 1
bool check_horizontal(void) {
		// from left
		if(board[0][0] == PLAYER_1) {
     e02:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <board>
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	69 f4       	brne	.+26     	; 0xe24 <check_horizontal+0x22>
			if (board[1][0] == PLAYER_1 && board[2][0] == PLAYER_1 && board[3][0] == PLAYER_1) {
     e0a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <board+0x5>
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	49 f4       	brne	.+18     	; 0xe24 <check_horizontal+0x22>
     e12:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	29 f4       	brne	.+10     	; 0xe24 <check_horizontal+0x22>
     e1a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f4       	brne	.+2      	; 0xe24 <check_horizontal+0x22>
     e22:	da c0       	rjmp	.+436    	; 0xfd8 <check_horizontal+0x1d6>
				return true;
			}
		}
		if(board[0][1] == PLAYER_1) {
     e24:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	69 f4       	brne	.+26     	; 0xe46 <check_horizontal+0x44>
			if (board[1][1] == PLAYER_1 && board[2][1] == PLAYER_1 && board[3][1] == PLAYER_1) {
     e2c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	49 f4       	brne	.+18     	; 0xe46 <check_horizontal+0x44>
     e34:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <board+0xb>
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	29 f4       	brne	.+10     	; 0xe46 <check_horizontal+0x44>
     e3c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f4       	brne	.+2      	; 0xe46 <check_horizontal+0x44>
     e44:	cb c0       	rjmp	.+406    	; 0xfdc <check_horizontal+0x1da>
				return true;
			}
		}
		if(board[0][2] == PLAYER_1) {
     e46:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <board+0x2>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	69 f4       	brne	.+26     	; 0xe68 <check_horizontal+0x66>
			if (board[1][2] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][2] == PLAYER_1) {
     e4e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <board+0x7>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	49 f4       	brne	.+18     	; 0xe68 <check_horizontal+0x66>
     e56:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	29 f4       	brne	.+10     	; 0xe68 <check_horizontal+0x66>
     e5e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f4       	brne	.+2      	; 0xe68 <check_horizontal+0x66>
     e66:	bc c0       	rjmp	.+376    	; 0xfe0 <check_horizontal+0x1de>
				return true;
			}
		}
		if(board[0][3] == PLAYER_1) {
     e68:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <board+0x3>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	69 f4       	brne	.+26     	; 0xe8a <check_horizontal+0x88>
			if (board[1][3] == PLAYER_1 && board[2][3] == PLAYER_1 && board[3][3] == PLAYER_1) {
     e70:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	49 f4       	brne	.+18     	; 0xe8a <check_horizontal+0x88>
     e78:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	29 f4       	brne	.+10     	; 0xe8a <check_horizontal+0x88>
     e80:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f4       	brne	.+2      	; 0xe8a <check_horizontal+0x88>
     e88:	ad c0       	rjmp	.+346    	; 0xfe4 <check_horizontal+0x1e2>
				return true;
			}
		}
		if(board[0][4] == PLAYER_1) {
     e8a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <board+0x4>
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	69 f4       	brne	.+26     	; 0xeac <check_horizontal+0xaa>
			if (board[1][4] == PLAYER_1 && board[2][4] == PLAYER_1 && board[3][4] == PLAYER_1) {
     e92:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <board+0x9>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	49 f4       	brne	.+18     	; 0xeac <check_horizontal+0xaa>
     e9a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	29 f4       	brne	.+10     	; 0xeac <check_horizontal+0xaa>
     ea2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	09 f4       	brne	.+2      	; 0xeac <check_horizontal+0xaa>
     eaa:	9e c0       	rjmp	.+316    	; 0xfe8 <check_horizontal+0x1e6>
				return true;
			}
		}
		//from middle left and middle right
		if(board[1][0] == PLAYER_1) {
     eac:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <board+0x5>
     eb0:	41 30       	cpi	r20, 0x01	; 1
     eb2:	69 f4       	brne	.+26     	; 0xece <check_horizontal+0xcc>
			if (board[2][0] == PLAYER_1 && board[3][0] == PLAYER_1 && board[4][0] == PLAYER_1) {
     eb4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	49 f4       	brne	.+18     	; 0xece <check_horizontal+0xcc>
     ebc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	29 f4       	brne	.+10     	; 0xece <check_horizontal+0xcc>
     ec4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <board+0x14>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	09 f4       	brne	.+2      	; 0xece <check_horizontal+0xcc>
     ecc:	8f c0       	rjmp	.+286    	; 0xfec <check_horizontal+0x1ea>
				return true;
			}
		}
		if(board[1][1] == PLAYER_1) {
     ece:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	69 f4       	brne	.+26     	; 0xef0 <check_horizontal+0xee>
			if (board[2][1] == PLAYER_1 && board[3][1] == PLAYER_1 && board[4][1] == PLAYER_1) {
     ed6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <board+0xb>
     eda:	91 30       	cpi	r25, 0x01	; 1
     edc:	49 f4       	brne	.+18     	; 0xef0 <check_horizontal+0xee>
     ede:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <board+0x10>
     ee2:	91 30       	cpi	r25, 0x01	; 1
     ee4:	29 f4       	brne	.+10     	; 0xef0 <check_horizontal+0xee>
     ee6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <board+0x15>
     eea:	91 30       	cpi	r25, 0x01	; 1
     eec:	09 f4       	brne	.+2      	; 0xef0 <check_horizontal+0xee>
     eee:	80 c0       	rjmp	.+256    	; 0xff0 <check_horizontal+0x1ee>
				return true;
			}
		}
		if(board[1][2] == PLAYER_1) {
     ef0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x7>
     ef4:	91 30       	cpi	r25, 0x01	; 1
     ef6:	69 f4       	brne	.+26     	; 0xf12 <check_horizontal+0x110>
			if (board[2][2] == PLAYER_1 && board[3][2] == PLAYER_1 && board[4][2] == PLAYER_1) {
     ef8:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <board+0xc>
     efc:	21 30       	cpi	r18, 0x01	; 1
     efe:	49 f4       	brne	.+18     	; 0xf12 <check_horizontal+0x110>
     f00:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <board+0x11>
     f04:	21 30       	cpi	r18, 0x01	; 1
     f06:	29 f4       	brne	.+10     	; 0xf12 <check_horizontal+0x110>
     f08:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <board+0x16>
     f0c:	21 30       	cpi	r18, 0x01	; 1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <check_horizontal+0x110>
     f10:	71 c0       	rjmp	.+226    	; 0xff4 <check_horizontal+0x1f2>
				return true;
			}
		}
		if(board[1][3] == PLAYER_1) {
     f12:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <board+0x8>
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	69 f4       	brne	.+26     	; 0xf34 <check_horizontal+0x132>
			if (board[2][3] == PLAYER_1 && board[3][3] == PLAYER_1 && board[4][3] == PLAYER_1) {
     f1a:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <board+0xd>
     f1e:	31 30       	cpi	r19, 0x01	; 1
     f20:	49 f4       	brne	.+18     	; 0xf34 <check_horizontal+0x132>
     f22:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <board+0x12>
     f26:	31 30       	cpi	r19, 0x01	; 1
     f28:	29 f4       	brne	.+10     	; 0xf34 <check_horizontal+0x132>
     f2a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <board+0x17>
     f2e:	31 30       	cpi	r19, 0x01	; 1
     f30:	09 f4       	brne	.+2      	; 0xf34 <check_horizontal+0x132>
     f32:	62 c0       	rjmp	.+196    	; 0xff8 <check_horizontal+0x1f6>
				return true;
			}
		}
		if(board[1][4] == PLAYER_1) {
     f34:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <board+0x9>
     f38:	31 30       	cpi	r19, 0x01	; 1
     f3a:	69 f4       	brne	.+26     	; 0xf56 <check_horizontal+0x154>
			if (board[2][4] == PLAYER_1 && board[3][4] == PLAYER_1 && board[4][4] == PLAYER_1) {
     f3c:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <board+0xe>
     f40:	51 30       	cpi	r21, 0x01	; 1
     f42:	49 f4       	brne	.+18     	; 0xf56 <check_horizontal+0x154>
     f44:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <board+0x13>
     f48:	51 30       	cpi	r21, 0x01	; 1
     f4a:	29 f4       	brne	.+10     	; 0xf56 <check_horizontal+0x154>
     f4c:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <board+0x18>
     f50:	51 30       	cpi	r21, 0x01	; 1
     f52:	09 f4       	brne	.+2      	; 0xf56 <check_horizontal+0x154>
     f54:	53 c0       	rjmp	.+166    	; 0xffc <check_horizontal+0x1fa>
				return true;
			}
		}
		// from right
		if(board[4][0] == PLAYER_1) {
     f56:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <board+0x14>
     f5a:	51 30       	cpi	r21, 0x01	; 1
     f5c:	59 f4       	brne	.+22     	; 0xf74 <check_horizontal+0x172>
			if (board[3][0] == PLAYER_1 && board[2][0] == PLAYER_1 && board[1][0] == PLAYER_1) {
     f5e:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <board+0xf>
     f62:	51 30       	cpi	r21, 0x01	; 1
     f64:	39 f4       	brne	.+14     	; 0xf74 <check_horizontal+0x172>
     f66:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <board+0xa>
     f6a:	51 30       	cpi	r21, 0x01	; 1
     f6c:	19 f4       	brne	.+6      	; 0xf74 <check_horizontal+0x172>
     f6e:	41 30       	cpi	r20, 0x01	; 1
     f70:	09 f4       	brne	.+2      	; 0xf74 <check_horizontal+0x172>
     f72:	46 c0       	rjmp	.+140    	; 0x1000 <check_horizontal+0x1fe>
				return true;
			}
		}
		if(board[1][1] == PLAYER_1) {
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	51 f4       	brne	.+20     	; 0xf8c <check_horizontal+0x18a>
			if (board[3][1] == PLAYER_1 && board[2][1] == PLAYER_1 && board[1][1] == PLAYER_1) {
     f78:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <board+0x10>
     f7c:	41 30       	cpi	r20, 0x01	; 1
     f7e:	31 f4       	brne	.+12     	; 0xf8c <check_horizontal+0x18a>
     f80:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <board+0xb>
     f84:	41 30       	cpi	r20, 0x01	; 1
     f86:	11 f4       	brne	.+4      	; 0xf8c <check_horizontal+0x18a>
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	e1 f1       	breq	.+120    	; 0x1004 <check_horizontal+0x202>
				return true;
			}
		}
		if(board[1][2] == PLAYER_1) {
     f8c:	91 30       	cpi	r25, 0x01	; 1
     f8e:	51 f4       	brne	.+20     	; 0xfa4 <check_horizontal+0x1a2>
			if (board[3][2] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][2] == PLAYER_1) {
     f90:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	31 f4       	brne	.+12     	; 0xfa4 <check_horizontal+0x1a2>
     f98:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <check_horizontal+0x1a2>
     fa0:	91 30       	cpi	r25, 0x01	; 1
     fa2:	91 f1       	breq	.+100    	; 0x1008 <check_horizontal+0x206>
				return true;
			}
		}
		if(board[1][3] == PLAYER_1) {
     fa4:	21 30       	cpi	r18, 0x01	; 1
     fa6:	51 f4       	brne	.+20     	; 0xfbc <check_horizontal+0x1ba>
			if (board[3][3] == PLAYER_1 && board[2][3] == PLAYER_1 && board[1][3] == PLAYER_1) {
     fa8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	31 f4       	brne	.+12     	; 0xfbc <check_horizontal+0x1ba>
     fb0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	11 f4       	brne	.+4      	; 0xfbc <check_horizontal+0x1ba>
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	41 f1       	breq	.+80     	; 0x100c <check_horizontal+0x20a>
				return true;
			}
		}
		if(board[1][4] == PLAYER_1) {
     fbc:	31 30       	cpi	r19, 0x01	; 1
     fbe:	41 f5       	brne	.+80     	; 0x1010 <check_horizontal+0x20e>
			if (board[3][4] == PLAYER_1 && board[2][4] == PLAYER_1 && board[1][4] == PLAYER_1) {
     fc0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	31 f5       	brne	.+76     	; 0x1014 <check_horizontal+0x212>
     fc8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	21 f5       	brne	.+72     	; 0x1018 <check_horizontal+0x216>
     fd0:	31 30       	cpi	r19, 0x01	; 1
     fd2:	21 f1       	breq	.+72     	; 0x101c <check_horizontal+0x21a>
				return true;
			}
		}

	return false;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	08 95       	ret
// check player 1
bool check_horizontal(void) {
		// from left
		if(board[0][0] == PLAYER_1) {
			if (board[1][0] == PLAYER_1 && board[2][0] == PLAYER_1 && board[3][0] == PLAYER_1) {
				return true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	08 95       	ret
			}
		}
		if(board[0][1] == PLAYER_1) {
			if (board[1][1] == PLAYER_1 && board[2][1] == PLAYER_1 && board[3][1] == PLAYER_1) {
				return true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	08 95       	ret
			}
		}
		if(board[0][2] == PLAYER_1) {
			if (board[1][2] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][2] == PLAYER_1) {
				return true;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 95       	ret
			}
		}
		if(board[0][3] == PLAYER_1) {
			if (board[1][3] == PLAYER_1 && board[2][3] == PLAYER_1 && board[3][3] == PLAYER_1) {
				return true;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	08 95       	ret
			}
		}
		if(board[0][4] == PLAYER_1) {
			if (board[1][4] == PLAYER_1 && board[2][4] == PLAYER_1 && board[3][4] == PLAYER_1) {
				return true;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	08 95       	ret
			}
		}
		//from middle left and middle right
		if(board[1][0] == PLAYER_1) {
			if (board[2][0] == PLAYER_1 && board[3][0] == PLAYER_1 && board[4][0] == PLAYER_1) {
				return true;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret
			}
		}
		if(board[1][1] == PLAYER_1) {
			if (board[2][1] == PLAYER_1 && board[3][1] == PLAYER_1 && board[4][1] == PLAYER_1) {
				return true;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	08 95       	ret
			}
		}
		if(board[1][2] == PLAYER_1) {
			if (board[2][2] == PLAYER_1 && board[3][2] == PLAYER_1 && board[4][2] == PLAYER_1) {
				return true;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	08 95       	ret
			}
		}
		if(board[1][3] == PLAYER_1) {
			if (board[2][3] == PLAYER_1 && board[3][3] == PLAYER_1 && board[4][3] == PLAYER_1) {
				return true;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret
			}
		}
		if(board[1][4] == PLAYER_1) {
			if (board[2][4] == PLAYER_1 && board[3][4] == PLAYER_1 && board[4][4] == PLAYER_1) {
				return true;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	08 95       	ret
			}
		}
		// from right
		if(board[4][0] == PLAYER_1) {
			if (board[3][0] == PLAYER_1 && board[2][0] == PLAYER_1 && board[1][0] == PLAYER_1) {
				return true;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret
			}
		}
		if(board[1][1] == PLAYER_1) {
			if (board[3][1] == PLAYER_1 && board[2][1] == PLAYER_1 && board[1][1] == PLAYER_1) {
				return true;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	08 95       	ret
			}
		}
		if(board[1][2] == PLAYER_1) {
			if (board[3][2] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][2] == PLAYER_1) {
				return true;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
			}
		}
		if(board[1][3] == PLAYER_1) {
			if (board[3][3] == PLAYER_1 && board[2][3] == PLAYER_1 && board[1][3] == PLAYER_1) {
				return true;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	08 95       	ret
			if (board[3][4] == PLAYER_1 && board[2][4] == PLAYER_1 && board[1][4] == PLAYER_1) {
				return true;
			}
		}

	return false;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret
				return true;
			}
		}
		if(board[1][4] == PLAYER_1) {
			if (board[3][4] == PLAYER_1 && board[2][4] == PLAYER_1 && board[1][4] == PLAYER_1) {
				return true;
    101c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

	return false;
}
    101e:	08 95       	ret

00001020 <check_horizontal_red>:

bool check_horizontal_red(void) {
	// from left
	if(board[0][0] == PLAYER_2) {
    1020:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <board>
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	69 f4       	brne	.+26     	; 0x1042 <check_horizontal_red+0x22>
		if (board[1][0] == PLAYER_2 && board[2][0] == PLAYER_2 && board[3][0] == PLAYER_2) {
    1028:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <board+0x5>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	49 f4       	brne	.+18     	; 0x1042 <check_horizontal_red+0x22>
    1030:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	29 f4       	brne	.+10     	; 0x1042 <check_horizontal_red+0x22>
    1038:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	09 f4       	brne	.+2      	; 0x1042 <check_horizontal_red+0x22>
    1040:	da c0       	rjmp	.+436    	; 0x11f6 <check_horizontal_red+0x1d6>
			return true;
		}
	}
	if(board[0][1] == PLAYER_2) {
    1042:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	69 f4       	brne	.+26     	; 0x1064 <check_horizontal_red+0x44>
		if (board[1][1] == PLAYER_2 && board[2][1] == PLAYER_2 && board[3][1] == PLAYER_2) {
    104a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	49 f4       	brne	.+18     	; 0x1064 <check_horizontal_red+0x44>
    1052:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <board+0xb>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	29 f4       	brne	.+10     	; 0x1064 <check_horizontal_red+0x44>
    105a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	09 f4       	brne	.+2      	; 0x1064 <check_horizontal_red+0x44>
    1062:	cb c0       	rjmp	.+406    	; 0x11fa <check_horizontal_red+0x1da>
			return true;
		}
	}
	if(board[0][2] == PLAYER_2) {
    1064:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <board+0x2>
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	69 f4       	brne	.+26     	; 0x1086 <check_horizontal_red+0x66>
		if (board[1][2] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][2] == PLAYER_2) {
    106c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <board+0x7>
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	49 f4       	brne	.+18     	; 0x1086 <check_horizontal_red+0x66>
    1074:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	29 f4       	brne	.+10     	; 0x1086 <check_horizontal_red+0x66>
    107c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	09 f4       	brne	.+2      	; 0x1086 <check_horizontal_red+0x66>
    1084:	bc c0       	rjmp	.+376    	; 0x11fe <check_horizontal_red+0x1de>
			return true;
		}
	}
	if(board[0][3] == PLAYER_2) {
    1086:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <board+0x3>
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	69 f4       	brne	.+26     	; 0x10a8 <check_horizontal_red+0x88>
		if (board[1][3] == PLAYER_2 && board[2][3] == PLAYER_2 && board[3][3] == PLAYER_2) {
    108e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	49 f4       	brne	.+18     	; 0x10a8 <check_horizontal_red+0x88>
    1096:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	29 f4       	brne	.+10     	; 0x10a8 <check_horizontal_red+0x88>
    109e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <check_horizontal_red+0x88>
    10a6:	ad c0       	rjmp	.+346    	; 0x1202 <check_horizontal_red+0x1e2>
			return true;
		}
	}
	if(board[0][4] == PLAYER_2) {
    10a8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <board+0x4>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	69 f4       	brne	.+26     	; 0x10ca <check_horizontal_red+0xaa>
		if (board[1][4] == PLAYER_2 && board[2][4] == PLAYER_2 && board[3][4] == PLAYER_2) {
    10b0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <board+0x9>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	49 f4       	brne	.+18     	; 0x10ca <check_horizontal_red+0xaa>
    10b8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	29 f4       	brne	.+10     	; 0x10ca <check_horizontal_red+0xaa>
    10c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	09 f4       	brne	.+2      	; 0x10ca <check_horizontal_red+0xaa>
    10c8:	9e c0       	rjmp	.+316    	; 0x1206 <check_horizontal_red+0x1e6>
			return true;
		}
	}
	//from middle left and middle right
	if(board[1][0] == PLAYER_2) {
    10ca:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <board+0x5>
    10ce:	42 30       	cpi	r20, 0x02	; 2
    10d0:	69 f4       	brne	.+26     	; 0x10ec <check_horizontal_red+0xcc>
		if (board[2][0] == PLAYER_2 && board[3][0] == PLAYER_2 && board[4][0] == PLAYER_2) {
    10d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	49 f4       	brne	.+18     	; 0x10ec <check_horizontal_red+0xcc>
    10da:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	29 f4       	brne	.+10     	; 0x10ec <check_horizontal_red+0xcc>
    10e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <board+0x14>
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	09 f4       	brne	.+2      	; 0x10ec <check_horizontal_red+0xcc>
    10ea:	8f c0       	rjmp	.+286    	; 0x120a <check_horizontal_red+0x1ea>
			return true;
		}
	}
	if(board[1][1] == PLAYER_2) {
    10ec:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	69 f4       	brne	.+26     	; 0x110e <check_horizontal_red+0xee>
		if (board[2][1] == PLAYER_2 && board[3][1] == PLAYER_2 && board[4][1] == PLAYER_2) {
    10f4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <board+0xb>
    10f8:	92 30       	cpi	r25, 0x02	; 2
    10fa:	49 f4       	brne	.+18     	; 0x110e <check_horizontal_red+0xee>
    10fc:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <board+0x10>
    1100:	92 30       	cpi	r25, 0x02	; 2
    1102:	29 f4       	brne	.+10     	; 0x110e <check_horizontal_red+0xee>
    1104:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <board+0x15>
    1108:	92 30       	cpi	r25, 0x02	; 2
    110a:	09 f4       	brne	.+2      	; 0x110e <check_horizontal_red+0xee>
    110c:	80 c0       	rjmp	.+256    	; 0x120e <check_horizontal_red+0x1ee>
			return true;
		}
	}
	if(board[1][2] == PLAYER_2) {
    110e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <board+0x7>
    1112:	92 30       	cpi	r25, 0x02	; 2
    1114:	69 f4       	brne	.+26     	; 0x1130 <check_horizontal_red+0x110>
		if (board[2][2] == PLAYER_2 && board[3][2] == PLAYER_2 && board[4][2] == PLAYER_2) {
    1116:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <board+0xc>
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	49 f4       	brne	.+18     	; 0x1130 <check_horizontal_red+0x110>
    111e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <board+0x11>
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	29 f4       	brne	.+10     	; 0x1130 <check_horizontal_red+0x110>
    1126:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <board+0x16>
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	09 f4       	brne	.+2      	; 0x1130 <check_horizontal_red+0x110>
    112e:	71 c0       	rjmp	.+226    	; 0x1212 <check_horizontal_red+0x1f2>
			return true;
		}
	}
	if(board[1][3] == PLAYER_2) {
    1130:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <board+0x8>
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	69 f4       	brne	.+26     	; 0x1152 <check_horizontal_red+0x132>
		if (board[2][3] == PLAYER_2 && board[3][3] == PLAYER_2 && board[4][3] == PLAYER_2) {
    1138:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <board+0xd>
    113c:	32 30       	cpi	r19, 0x02	; 2
    113e:	49 f4       	brne	.+18     	; 0x1152 <check_horizontal_red+0x132>
    1140:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <board+0x12>
    1144:	32 30       	cpi	r19, 0x02	; 2
    1146:	29 f4       	brne	.+10     	; 0x1152 <check_horizontal_red+0x132>
    1148:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <board+0x17>
    114c:	32 30       	cpi	r19, 0x02	; 2
    114e:	09 f4       	brne	.+2      	; 0x1152 <check_horizontal_red+0x132>
    1150:	62 c0       	rjmp	.+196    	; 0x1216 <check_horizontal_red+0x1f6>
			return true;
		}
	}
	if(board[1][4] == PLAYER_2) {
    1152:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <board+0x9>
    1156:	32 30       	cpi	r19, 0x02	; 2
    1158:	69 f4       	brne	.+26     	; 0x1174 <check_horizontal_red+0x154>
		if (board[2][4] == PLAYER_2 && board[3][4] == PLAYER_2 && board[4][4] == PLAYER_2) {
    115a:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <board+0xe>
    115e:	52 30       	cpi	r21, 0x02	; 2
    1160:	49 f4       	brne	.+18     	; 0x1174 <check_horizontal_red+0x154>
    1162:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <board+0x13>
    1166:	52 30       	cpi	r21, 0x02	; 2
    1168:	29 f4       	brne	.+10     	; 0x1174 <check_horizontal_red+0x154>
    116a:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <board+0x18>
    116e:	52 30       	cpi	r21, 0x02	; 2
    1170:	09 f4       	brne	.+2      	; 0x1174 <check_horizontal_red+0x154>
    1172:	53 c0       	rjmp	.+166    	; 0x121a <check_horizontal_red+0x1fa>
			return true;
		}
	}
	// from right
	if(board[4][0] == PLAYER_2) {
    1174:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <board+0x14>
    1178:	52 30       	cpi	r21, 0x02	; 2
    117a:	59 f4       	brne	.+22     	; 0x1192 <check_horizontal_red+0x172>
		if (board[3][0] == PLAYER_2 && board[2][0] == PLAYER_2 && board[1][0] == PLAYER_2) {
    117c:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <board+0xf>
    1180:	52 30       	cpi	r21, 0x02	; 2
    1182:	39 f4       	brne	.+14     	; 0x1192 <check_horizontal_red+0x172>
    1184:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <board+0xa>
    1188:	52 30       	cpi	r21, 0x02	; 2
    118a:	19 f4       	brne	.+6      	; 0x1192 <check_horizontal_red+0x172>
    118c:	42 30       	cpi	r20, 0x02	; 2
    118e:	09 f4       	brne	.+2      	; 0x1192 <check_horizontal_red+0x172>
    1190:	46 c0       	rjmp	.+140    	; 0x121e <check_horizontal_red+0x1fe>
			return true;
		}
	}
	if(board[1][1] == PLAYER_2) {
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	51 f4       	brne	.+20     	; 0x11aa <check_horizontal_red+0x18a>
		if (board[3][1] == PLAYER_2 && board[2][1] == PLAYER_2 && board[1][1] == PLAYER_2) {
    1196:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <board+0x10>
    119a:	42 30       	cpi	r20, 0x02	; 2
    119c:	31 f4       	brne	.+12     	; 0x11aa <check_horizontal_red+0x18a>
    119e:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <board+0xb>
    11a2:	42 30       	cpi	r20, 0x02	; 2
    11a4:	11 f4       	brne	.+4      	; 0x11aa <check_horizontal_red+0x18a>
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	e1 f1       	breq	.+120    	; 0x1222 <check_horizontal_red+0x202>
			return true;
		}
	}
	if(board[1][2] == PLAYER_2) {
    11aa:	92 30       	cpi	r25, 0x02	; 2
    11ac:	51 f4       	brne	.+20     	; 0x11c2 <check_horizontal_red+0x1a2>
		if (board[3][2] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][2] == PLAYER_2) {
    11ae:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <check_horizontal_red+0x1a2>
    11b6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <check_horizontal_red+0x1a2>
    11be:	92 30       	cpi	r25, 0x02	; 2
    11c0:	91 f1       	breq	.+100    	; 0x1226 <check_horizontal_red+0x206>
			return true;
		}
	}
	if(board[1][3] == PLAYER_2) {
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	51 f4       	brne	.+20     	; 0x11da <check_horizontal_red+0x1ba>
		if (board[3][3] == PLAYER_2 && board[2][3] == PLAYER_2 && board[1][3] == PLAYER_2) {
    11c6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	31 f4       	brne	.+12     	; 0x11da <check_horizontal_red+0x1ba>
    11ce:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	11 f4       	brne	.+4      	; 0x11da <check_horizontal_red+0x1ba>
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	41 f1       	breq	.+80     	; 0x122a <check_horizontal_red+0x20a>
			return true;
		}
	}
	if(board[1][4] == PLAYER_2) {
    11da:	32 30       	cpi	r19, 0x02	; 2
    11dc:	41 f5       	brne	.+80     	; 0x122e <check_horizontal_red+0x20e>
		if (board[3][4] == PLAYER_2 && board[2][4] == PLAYER_2 && board[1][4] == PLAYER_2) {
    11de:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	31 f5       	brne	.+76     	; 0x1232 <check_horizontal_red+0x212>
    11e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	21 f5       	brne	.+72     	; 0x1236 <check_horizontal_red+0x216>
    11ee:	32 30       	cpi	r19, 0x02	; 2
    11f0:	21 f1       	breq	.+72     	; 0x123a <check_horizontal_red+0x21a>
			return true;
		}
	}
	return false;
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	08 95       	ret

bool check_horizontal_red(void) {
	// from left
	if(board[0][0] == PLAYER_2) {
		if (board[1][0] == PLAYER_2 && board[2][0] == PLAYER_2 && board[3][0] == PLAYER_2) {
			return true;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	08 95       	ret
		}
	}
	if(board[0][1] == PLAYER_2) {
		if (board[1][1] == PLAYER_2 && board[2][1] == PLAYER_2 && board[3][1] == PLAYER_2) {
			return true;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	08 95       	ret
		}
	}
	if(board[0][2] == PLAYER_2) {
		if (board[1][2] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][2] == PLAYER_2) {
			return true;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	08 95       	ret
		}
	}
	if(board[0][3] == PLAYER_2) {
		if (board[1][3] == PLAYER_2 && board[2][3] == PLAYER_2 && board[3][3] == PLAYER_2) {
			return true;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	08 95       	ret
		}
	}
	if(board[0][4] == PLAYER_2) {
		if (board[1][4] == PLAYER_2 && board[2][4] == PLAYER_2 && board[3][4] == PLAYER_2) {
			return true;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	08 95       	ret
		}
	}
	//from middle left and middle right
	if(board[1][0] == PLAYER_2) {
		if (board[2][0] == PLAYER_2 && board[3][0] == PLAYER_2 && board[4][0] == PLAYER_2) {
			return true;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret
		}
	}
	if(board[1][1] == PLAYER_2) {
		if (board[2][1] == PLAYER_2 && board[3][1] == PLAYER_2 && board[4][1] == PLAYER_2) {
			return true;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret
		}
	}
	if(board[1][2] == PLAYER_2) {
		if (board[2][2] == PLAYER_2 && board[3][2] == PLAYER_2 && board[4][2] == PLAYER_2) {
			return true;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret
		}
	}
	if(board[1][3] == PLAYER_2) {
		if (board[2][3] == PLAYER_2 && board[3][3] == PLAYER_2 && board[4][3] == PLAYER_2) {
			return true;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret
		}
	}
	if(board[1][4] == PLAYER_2) {
		if (board[2][4] == PLAYER_2 && board[3][4] == PLAYER_2 && board[4][4] == PLAYER_2) {
			return true;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	08 95       	ret
		}
	}
	// from right
	if(board[4][0] == PLAYER_2) {
		if (board[3][0] == PLAYER_2 && board[2][0] == PLAYER_2 && board[1][0] == PLAYER_2) {
			return true;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret
		}
	}
	if(board[1][1] == PLAYER_2) {
		if (board[3][1] == PLAYER_2 && board[2][1] == PLAYER_2 && board[1][1] == PLAYER_2) {
			return true;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	08 95       	ret
		}
	}
	if(board[1][2] == PLAYER_2) {
		if (board[3][2] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][2] == PLAYER_2) {
			return true;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret
		}
	}
	if(board[1][3] == PLAYER_2) {
		if (board[3][3] == PLAYER_2 && board[2][3] == PLAYER_2 && board[1][3] == PLAYER_2) {
			return true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	08 95       	ret
	if(board[1][4] == PLAYER_2) {
		if (board[3][4] == PLAYER_2 && board[2][4] == PLAYER_2 && board[1][4] == PLAYER_2) {
			return true;
		}
	}
	return false;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	08 95       	ret
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	08 95       	ret
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret
			return true;
		}
	}
	if(board[1][4] == PLAYER_2) {
		if (board[3][4] == PLAYER_2 && board[2][4] == PLAYER_2 && board[1][4] == PLAYER_2) {
			return true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    123c:	08 95       	ret

0000123e <check_vertical>:

bool check_vertical(void) {
	// from left
	if(board[0][0] == PLAYER_1) {
    123e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <board>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	69 f4       	brne	.+26     	; 0x1260 <check_vertical+0x22>
		if (board[0][1] == PLAYER_1 && board[0][2] == PLAYER_1 && board[0][3] == PLAYER_1) {
    1246:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	49 f4       	brne	.+18     	; 0x1260 <check_vertical+0x22>
    124e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <board+0x2>
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	29 f4       	brne	.+10     	; 0x1260 <check_vertical+0x22>
    1256:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <board+0x3>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	09 f4       	brne	.+2      	; 0x1260 <check_vertical+0x22>
    125e:	e3 c0       	rjmp	.+454    	; 0x1426 <check_vertical+0x1e8>
			return true;
		}
	}
	if(board[1][0] == PLAYER_1) {
    1260:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <board+0x5>
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	69 f4       	brne	.+26     	; 0x1282 <check_vertical+0x44>
		if (board[1][1] == PLAYER_1 && board[1][2] == PLAYER_1 && board[1][3] == PLAYER_1) {
    1268:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	49 f4       	brne	.+18     	; 0x1282 <check_vertical+0x44>
    1270:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <board+0x7>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	29 f4       	brne	.+10     	; 0x1282 <check_vertical+0x44>
    1278:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	09 f4       	brne	.+2      	; 0x1282 <check_vertical+0x44>
    1280:	d4 c0       	rjmp	.+424    	; 0x142a <check_vertical+0x1ec>
			return true;
		}
	}
	if(board[2][0] == PLAYER_1) {
    1282:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	69 f4       	brne	.+26     	; 0x12a4 <check_vertical+0x66>
		if (board[2][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[2][3] == PLAYER_1) {
    128a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <board+0xb>
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	49 f4       	brne	.+18     	; 0x12a4 <check_vertical+0x66>
    1292:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	29 f4       	brne	.+10     	; 0x12a4 <check_vertical+0x66>
    129a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <check_vertical+0x66>
    12a2:	c5 c0       	rjmp	.+394    	; 0x142e <check_vertical+0x1f0>
			return true;
		}
	}
	if(board[3][0] == PLAYER_1) {
    12a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	69 f4       	brne	.+26     	; 0x12c6 <check_vertical+0x88>
		if (board[3][1] == PLAYER_1 && board[3][2] == PLAYER_1 && board[3][3] == PLAYER_1) {
    12ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	49 f4       	brne	.+18     	; 0x12c6 <check_vertical+0x88>
    12b4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <check_vertical+0x88>
    12bc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <check_vertical+0x88>
    12c4:	b6 c0       	rjmp	.+364    	; 0x1432 <check_vertical+0x1f4>
			return true;
		}
	}
	if(board[4][0] == PLAYER_1) {
    12c6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <board+0x14>
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <check_vertical+0xaa>
		if (board[4][1] == PLAYER_1 && board[4][2] == PLAYER_1 && board[4][3] == PLAYER_1) {
    12ce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <board+0x15>
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	49 f4       	brne	.+18     	; 0x12e8 <check_vertical+0xaa>
    12d6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <board+0x16>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <check_vertical+0xaa>
    12de:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <board+0x17>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <check_vertical+0xaa>
    12e6:	a7 c0       	rjmp	.+334    	; 0x1436 <check_vertical+0x1f8>
			return true;
		}
	}
	//from middle left and middle right
	if(board[0][1] == PLAYER_1) {
    12e8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	69 f4       	brne	.+26     	; 0x130a <check_vertical+0xcc>
		if (board[0][2] == PLAYER_1 && board[0][3] == PLAYER_1 && board[0][4] == PLAYER_1) {
    12f0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <board+0x2>
    12f4:	91 30       	cpi	r25, 0x01	; 1
    12f6:	49 f4       	brne	.+18     	; 0x130a <check_vertical+0xcc>
    12f8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <board+0x3>
    12fc:	91 30       	cpi	r25, 0x01	; 1
    12fe:	29 f4       	brne	.+10     	; 0x130a <check_vertical+0xcc>
    1300:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <board+0x4>
    1304:	91 30       	cpi	r25, 0x01	; 1
    1306:	09 f4       	brne	.+2      	; 0x130a <check_vertical+0xcc>
    1308:	98 c0       	rjmp	.+304    	; 0x143a <check_vertical+0x1fc>
			return true;
		}
	}
	if(board[1][1] == PLAYER_1) {
    130a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <board+0x6>
    130e:	91 30       	cpi	r25, 0x01	; 1
    1310:	69 f4       	brne	.+26     	; 0x132c <check_vertical+0xee>
		if (board[1][2] == PLAYER_1 && board[1][3] == PLAYER_1 && board[1][4] == PLAYER_1) {
    1312:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <board+0x7>
    1316:	21 30       	cpi	r18, 0x01	; 1
    1318:	49 f4       	brne	.+18     	; 0x132c <check_vertical+0xee>
    131a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <board+0x8>
    131e:	21 30       	cpi	r18, 0x01	; 1
    1320:	29 f4       	brne	.+10     	; 0x132c <check_vertical+0xee>
    1322:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <board+0x9>
    1326:	21 30       	cpi	r18, 0x01	; 1
    1328:	09 f4       	brne	.+2      	; 0x132c <check_vertical+0xee>
    132a:	89 c0       	rjmp	.+274    	; 0x143e <check_vertical+0x200>
			return true;
		}
	}
	if(board[2][1] == PLAYER_1) {
    132c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <board+0xb>
    1330:	21 30       	cpi	r18, 0x01	; 1
    1332:	69 f4       	brne	.+26     	; 0x134e <check_vertical+0x110>
		if (board[2][2] == PLAYER_1 && board[2][3] == PLAYER_1 && board[2][4] == PLAYER_1) {
    1334:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <board+0xc>
    1338:	31 30       	cpi	r19, 0x01	; 1
    133a:	49 f4       	brne	.+18     	; 0x134e <check_vertical+0x110>
    133c:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <board+0xd>
    1340:	31 30       	cpi	r19, 0x01	; 1
    1342:	29 f4       	brne	.+10     	; 0x134e <check_vertical+0x110>
    1344:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <board+0xe>
    1348:	31 30       	cpi	r19, 0x01	; 1
    134a:	09 f4       	brne	.+2      	; 0x134e <check_vertical+0x110>
    134c:	7a c0       	rjmp	.+244    	; 0x1442 <check_vertical+0x204>
			return true;
		}
	}
	if(board[3][1] == PLAYER_1) {
    134e:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <board+0x10>
    1352:	31 30       	cpi	r19, 0x01	; 1
    1354:	69 f4       	brne	.+26     	; 0x1370 <check_vertical+0x132>
		if (board[3][2] == PLAYER_1 && board[3][3] == PLAYER_1 && board[3][4] == PLAYER_1) {
    1356:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <board+0x11>
    135a:	41 30       	cpi	r20, 0x01	; 1
    135c:	49 f4       	brne	.+18     	; 0x1370 <check_vertical+0x132>
    135e:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <board+0x12>
    1362:	41 30       	cpi	r20, 0x01	; 1
    1364:	29 f4       	brne	.+10     	; 0x1370 <check_vertical+0x132>
    1366:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <board+0x13>
    136a:	41 30       	cpi	r20, 0x01	; 1
    136c:	09 f4       	brne	.+2      	; 0x1370 <check_vertical+0x132>
    136e:	6b c0       	rjmp	.+214    	; 0x1446 <check_vertical+0x208>
			return true;
		}
	}
	if(board[4][1] == PLAYER_1) {
    1370:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <board+0x15>
    1374:	41 30       	cpi	r20, 0x01	; 1
    1376:	69 f4       	brne	.+26     	; 0x1392 <check_vertical+0x154>
		if (board[4][2] == PLAYER_1 && board[4][3] == PLAYER_1 && board[4][4] == PLAYER_1) {
    1378:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <board+0x16>
    137c:	51 30       	cpi	r21, 0x01	; 1
    137e:	49 f4       	brne	.+18     	; 0x1392 <check_vertical+0x154>
    1380:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <board+0x17>
    1384:	51 30       	cpi	r21, 0x01	; 1
    1386:	29 f4       	brne	.+10     	; 0x1392 <check_vertical+0x154>
    1388:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <board+0x18>
    138c:	51 30       	cpi	r21, 0x01	; 1
    138e:	09 f4       	brne	.+2      	; 0x1392 <check_vertical+0x154>
    1390:	5c c0       	rjmp	.+184    	; 0x144a <check_vertical+0x20c>
			return true;
		}
	}
	// from right
	if(board[0][4] == PLAYER_1) {
    1392:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <board+0x4>
    1396:	51 30       	cpi	r21, 0x01	; 1
    1398:	59 f4       	brne	.+22     	; 0x13b0 <check_vertical+0x172>
		if (board[0][3] == PLAYER_1 && board[0][2] == PLAYER_1 && board[0][1] == PLAYER_1) {
    139a:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <board+0x3>
    139e:	51 30       	cpi	r21, 0x01	; 1
    13a0:	39 f4       	brne	.+14     	; 0x13b0 <check_vertical+0x172>
    13a2:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <board+0x2>
    13a6:	51 30       	cpi	r21, 0x01	; 1
    13a8:	19 f4       	brne	.+6      	; 0x13b0 <check_vertical+0x172>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <check_vertical+0x172>
    13ae:	4f c0       	rjmp	.+158    	; 0x144e <check_vertical+0x210>
			return true;
		}
	}
	if(board[1][4] == PLAYER_1) {
    13b0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <board+0x9>
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	59 f4       	brne	.+22     	; 0x13ce <check_vertical+0x190>
		if (board[1][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][1] == PLAYER_1) {
    13b8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	39 f4       	brne	.+14     	; 0x13ce <check_vertical+0x190>
    13c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	19 f4       	brne	.+6      	; 0x13ce <check_vertical+0x190>
    13c8:	91 30       	cpi	r25, 0x01	; 1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <check_vertical+0x190>
    13cc:	42 c0       	rjmp	.+132    	; 0x1452 <check_vertical+0x214>
			return true;
		}
	}
	if(board[2][4] == PLAYER_1) {
    13ce:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	51 f4       	brne	.+20     	; 0x13ea <check_vertical+0x1ac>
		if (board[2][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[2][1] == PLAYER_1) {
    13d6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	31 f4       	brne	.+12     	; 0x13ea <check_vertical+0x1ac>
    13de:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f4       	brne	.+4      	; 0x13ea <check_vertical+0x1ac>
    13e6:	21 30       	cpi	r18, 0x01	; 1
    13e8:	b1 f1       	breq	.+108    	; 0x1456 <check_vertical+0x218>
			return true;
		}
	}
	if(board[3][4] == PLAYER_1) {
    13ea:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	51 f4       	brne	.+20     	; 0x1406 <check_vertical+0x1c8>
		if (board[3][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][1] == PLAYER_1) {
    13f2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	31 f4       	brne	.+12     	; 0x1406 <check_vertical+0x1c8>
    13fa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	11 f4       	brne	.+4      	; 0x1406 <check_vertical+0x1c8>
    1402:	31 30       	cpi	r19, 0x01	; 1
    1404:	51 f1       	breq	.+84     	; 0x145a <check_vertical+0x21c>
			return true;
		}
	}
	if(board[4][4] == PLAYER_1) {
    1406:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <board+0x18>
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	41 f5       	brne	.+80     	; 0x145e <check_vertical+0x220>
		if (board[4][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[4][1] == PLAYER_1) {
    140e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <board+0x17>
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	31 f5       	brne	.+76     	; 0x1462 <check_vertical+0x224>
    1416:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	21 f5       	brne	.+72     	; 0x1466 <check_vertical+0x228>
    141e:	41 30       	cpi	r20, 0x01	; 1
    1420:	21 f1       	breq	.+72     	; 0x146a <check_vertical+0x22c>
			return true;
		}
	}

	return false;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret

bool check_vertical(void) {
	// from left
	if(board[0][0] == PLAYER_1) {
		if (board[0][1] == PLAYER_1 && board[0][2] == PLAYER_1 && board[0][3] == PLAYER_1) {
			return true;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret
		}
	}
	if(board[1][0] == PLAYER_1) {
		if (board[1][1] == PLAYER_1 && board[1][2] == PLAYER_1 && board[1][3] == PLAYER_1) {
			return true;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	08 95       	ret
		}
	}
	if(board[2][0] == PLAYER_1) {
		if (board[2][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[2][3] == PLAYER_1) {
			return true;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	08 95       	ret
		}
	}
	if(board[3][0] == PLAYER_1) {
		if (board[3][1] == PLAYER_1 && board[3][2] == PLAYER_1 && board[3][3] == PLAYER_1) {
			return true;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	08 95       	ret
		}
	}
	if(board[4][0] == PLAYER_1) {
		if (board[4][1] == PLAYER_1 && board[4][2] == PLAYER_1 && board[4][3] == PLAYER_1) {
			return true;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	08 95       	ret
		}
	}
	//from middle left and middle right
	if(board[0][1] == PLAYER_1) {
		if (board[0][2] == PLAYER_1 && board[0][3] == PLAYER_1 && board[0][4] == PLAYER_1) {
			return true;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	08 95       	ret
		}
	}
	if(board[1][1] == PLAYER_1) {
		if (board[1][2] == PLAYER_1 && board[1][3] == PLAYER_1 && board[1][4] == PLAYER_1) {
			return true;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret
		}
	}
	if(board[2][1] == PLAYER_1) {
		if (board[2][2] == PLAYER_1 && board[2][3] == PLAYER_1 && board[2][4] == PLAYER_1) {
			return true;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	08 95       	ret
		}
	}
	if(board[3][1] == PLAYER_1) {
		if (board[3][2] == PLAYER_1 && board[3][3] == PLAYER_1 && board[3][4] == PLAYER_1) {
			return true;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	08 95       	ret
		}
	}
	if(board[4][1] == PLAYER_1) {
		if (board[4][2] == PLAYER_1 && board[4][3] == PLAYER_1 && board[4][4] == PLAYER_1) {
			return true;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret
		}
	}
	// from right
	if(board[0][4] == PLAYER_1) {
		if (board[0][3] == PLAYER_1 && board[0][2] == PLAYER_1 && board[0][1] == PLAYER_1) {
			return true;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	08 95       	ret
		}
	}
	if(board[1][4] == PLAYER_1) {
		if (board[1][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][1] == PLAYER_1) {
			return true;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	08 95       	ret
		}
	}
	if(board[2][4] == PLAYER_1) {
		if (board[2][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[2][1] == PLAYER_1) {
			return true;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	08 95       	ret
		}
	}
	if(board[3][4] == PLAYER_1) {
		if (board[3][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][1] == PLAYER_1) {
			return true;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	08 95       	ret
		if (board[4][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[4][1] == PLAYER_1) {
			return true;
		}
	}

	return false;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 95       	ret
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret
			return true;
		}
	}
	if(board[4][4] == PLAYER_1) {
		if (board[4][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[4][1] == PLAYER_1) {
			return true;
    146a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return false;
}
    146c:	08 95       	ret

0000146e <check_vertical_red>:

bool check_vertical_red(void) {
	// from left
	if(board[0][0] == PLAYER_2) {
    146e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <board>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	69 f4       	brne	.+26     	; 0x1490 <check_vertical_red+0x22>
		if (board[0][1] == PLAYER_2 && board[0][2] == PLAYER_2 && board[0][3] == PLAYER_2) {
    1476:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	49 f4       	brne	.+18     	; 0x1490 <check_vertical_red+0x22>
    147e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <board+0x2>
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	29 f4       	brne	.+10     	; 0x1490 <check_vertical_red+0x22>
    1486:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <board+0x3>
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	09 f4       	brne	.+2      	; 0x1490 <check_vertical_red+0x22>
    148e:	e3 c0       	rjmp	.+454    	; 0x1656 <check_vertical_red+0x1e8>
			return true;
		}
	}
	if(board[1][0] == PLAYER_2) {
    1490:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <board+0x5>
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	69 f4       	brne	.+26     	; 0x14b2 <check_vertical_red+0x44>
		if (board[1][1] == PLAYER_2 && board[1][2] == PLAYER_2 && board[1][3] == PLAYER_2) {
    1498:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	49 f4       	brne	.+18     	; 0x14b2 <check_vertical_red+0x44>
    14a0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <board+0x7>
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <check_vertical_red+0x44>
    14a8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <check_vertical_red+0x44>
    14b0:	d4 c0       	rjmp	.+424    	; 0x165a <check_vertical_red+0x1ec>
			return true;
		}
	}
	if(board[2][0] == PLAYER_2) {
    14b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <board+0xa>
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	69 f4       	brne	.+26     	; 0x14d4 <check_vertical_red+0x66>
		if (board[2][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[2][3] == PLAYER_2) {
    14ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <board+0xb>
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	49 f4       	brne	.+18     	; 0x14d4 <check_vertical_red+0x66>
    14c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	29 f4       	brne	.+10     	; 0x14d4 <check_vertical_red+0x66>
    14ca:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <check_vertical_red+0x66>
    14d2:	c5 c0       	rjmp	.+394    	; 0x165e <check_vertical_red+0x1f0>
			return true;
		}
	}
	if(board[3][0] == PLAYER_2) {
    14d4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <board+0xf>
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	69 f4       	brne	.+26     	; 0x14f6 <check_vertical_red+0x88>
		if (board[3][1] == PLAYER_2 && board[3][2] == PLAYER_2 && board[3][3] == PLAYER_2) {
    14dc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	49 f4       	brne	.+18     	; 0x14f6 <check_vertical_red+0x88>
    14e4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <board+0x11>
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <check_vertical_red+0x88>
    14ec:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <check_vertical_red+0x88>
    14f4:	b6 c0       	rjmp	.+364    	; 0x1662 <check_vertical_red+0x1f4>
			return true;
		}
	}
	if(board[4][0] == PLAYER_2) {
    14f6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <board+0x14>
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	69 f4       	brne	.+26     	; 0x1518 <check_vertical_red+0xaa>
		if (board[4][1] == PLAYER_2 && board[4][2] == PLAYER_2 && board[4][3] == PLAYER_2) {
    14fe:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <board+0x15>
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	49 f4       	brne	.+18     	; 0x1518 <check_vertical_red+0xaa>
    1506:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <board+0x16>
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	29 f4       	brne	.+10     	; 0x1518 <check_vertical_red+0xaa>
    150e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <board+0x17>
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	09 f4       	brne	.+2      	; 0x1518 <check_vertical_red+0xaa>
    1516:	a7 c0       	rjmp	.+334    	; 0x1666 <check_vertical_red+0x1f8>
			return true;
		}
	}
	//from middle left and middle right
	if(board[0][1] == PLAYER_2) {
    1518:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <board+0x1>
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	69 f4       	brne	.+26     	; 0x153a <check_vertical_red+0xcc>
		if (board[0][2] == PLAYER_2 && board[0][3] == PLAYER_2 && board[0][4] == PLAYER_2) {
    1520:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <board+0x2>
    1524:	92 30       	cpi	r25, 0x02	; 2
    1526:	49 f4       	brne	.+18     	; 0x153a <check_vertical_red+0xcc>
    1528:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <board+0x3>
    152c:	92 30       	cpi	r25, 0x02	; 2
    152e:	29 f4       	brne	.+10     	; 0x153a <check_vertical_red+0xcc>
    1530:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <board+0x4>
    1534:	92 30       	cpi	r25, 0x02	; 2
    1536:	09 f4       	brne	.+2      	; 0x153a <check_vertical_red+0xcc>
    1538:	98 c0       	rjmp	.+304    	; 0x166a <check_vertical_red+0x1fc>
			return true;
		}
	}
	if(board[1][1] == PLAYER_2) {
    153a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <board+0x6>
    153e:	92 30       	cpi	r25, 0x02	; 2
    1540:	69 f4       	brne	.+26     	; 0x155c <check_vertical_red+0xee>
		if (board[1][2] == PLAYER_2 && board[1][3] == PLAYER_2 && board[1][4] == PLAYER_2) {
    1542:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <board+0x7>
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	49 f4       	brne	.+18     	; 0x155c <check_vertical_red+0xee>
    154a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <board+0x8>
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	29 f4       	brne	.+10     	; 0x155c <check_vertical_red+0xee>
    1552:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <board+0x9>
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	09 f4       	brne	.+2      	; 0x155c <check_vertical_red+0xee>
    155a:	89 c0       	rjmp	.+274    	; 0x166e <check_vertical_red+0x200>
			return true;
		}
	}
	if(board[2][1] == PLAYER_2) {
    155c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <board+0xb>
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	69 f4       	brne	.+26     	; 0x157e <check_vertical_red+0x110>
		if (board[2][2] == PLAYER_2 && board[2][3] == PLAYER_2 && board[2][4] == PLAYER_2) {
    1564:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <board+0xc>
    1568:	32 30       	cpi	r19, 0x02	; 2
    156a:	49 f4       	brne	.+18     	; 0x157e <check_vertical_red+0x110>
    156c:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <board+0xd>
    1570:	32 30       	cpi	r19, 0x02	; 2
    1572:	29 f4       	brne	.+10     	; 0x157e <check_vertical_red+0x110>
    1574:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <board+0xe>
    1578:	32 30       	cpi	r19, 0x02	; 2
    157a:	09 f4       	brne	.+2      	; 0x157e <check_vertical_red+0x110>
    157c:	7a c0       	rjmp	.+244    	; 0x1672 <check_vertical_red+0x204>
			return true;
		}
	}
	if(board[3][1] == PLAYER_2) {
    157e:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <board+0x10>
    1582:	32 30       	cpi	r19, 0x02	; 2
    1584:	69 f4       	brne	.+26     	; 0x15a0 <check_vertical_red+0x132>
		if (board[3][2] == PLAYER_2 && board[3][3] == PLAYER_2 && board[3][4] == PLAYER_2) {
    1586:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <board+0x11>
    158a:	42 30       	cpi	r20, 0x02	; 2
    158c:	49 f4       	brne	.+18     	; 0x15a0 <check_vertical_red+0x132>
    158e:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <board+0x12>
    1592:	42 30       	cpi	r20, 0x02	; 2
    1594:	29 f4       	brne	.+10     	; 0x15a0 <check_vertical_red+0x132>
    1596:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <board+0x13>
    159a:	42 30       	cpi	r20, 0x02	; 2
    159c:	09 f4       	brne	.+2      	; 0x15a0 <check_vertical_red+0x132>
    159e:	6b c0       	rjmp	.+214    	; 0x1676 <check_vertical_red+0x208>
			return true;
		}
	}
	if(board[4][1] == PLAYER_2) {
    15a0:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <board+0x15>
    15a4:	42 30       	cpi	r20, 0x02	; 2
    15a6:	69 f4       	brne	.+26     	; 0x15c2 <check_vertical_red+0x154>
		if (board[4][2] == PLAYER_2 && board[4][3] == PLAYER_2 && board[4][4] == PLAYER_2) {
    15a8:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <board+0x16>
    15ac:	52 30       	cpi	r21, 0x02	; 2
    15ae:	49 f4       	brne	.+18     	; 0x15c2 <check_vertical_red+0x154>
    15b0:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <board+0x17>
    15b4:	52 30       	cpi	r21, 0x02	; 2
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <check_vertical_red+0x154>
    15b8:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <board+0x18>
    15bc:	52 30       	cpi	r21, 0x02	; 2
    15be:	09 f4       	brne	.+2      	; 0x15c2 <check_vertical_red+0x154>
    15c0:	5c c0       	rjmp	.+184    	; 0x167a <check_vertical_red+0x20c>
			return true;
		}
	}
	// from right
	if(board[0][4] == PLAYER_2) {
    15c2:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <board+0x4>
    15c6:	52 30       	cpi	r21, 0x02	; 2
    15c8:	59 f4       	brne	.+22     	; 0x15e0 <check_vertical_red+0x172>
		if (board[0][3] == PLAYER_2 && board[0][2] == PLAYER_2 && board[0][1] == PLAYER_2) {
    15ca:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <board+0x3>
    15ce:	52 30       	cpi	r21, 0x02	; 2
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <check_vertical_red+0x172>
    15d2:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <board+0x2>
    15d6:	52 30       	cpi	r21, 0x02	; 2
    15d8:	19 f4       	brne	.+6      	; 0x15e0 <check_vertical_red+0x172>
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <check_vertical_red+0x172>
    15de:	4f c0       	rjmp	.+158    	; 0x167e <check_vertical_red+0x210>
			return true;
		}
	}
	if(board[1][4] == PLAYER_2) {
    15e0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <board+0x9>
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	59 f4       	brne	.+22     	; 0x15fe <check_vertical_red+0x190>
		if (board[1][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][1] == PLAYER_2) {
    15e8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	39 f4       	brne	.+14     	; 0x15fe <check_vertical_red+0x190>
    15f0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	19 f4       	brne	.+6      	; 0x15fe <check_vertical_red+0x190>
    15f8:	92 30       	cpi	r25, 0x02	; 2
    15fa:	09 f4       	brne	.+2      	; 0x15fe <check_vertical_red+0x190>
    15fc:	42 c0       	rjmp	.+132    	; 0x1682 <check_vertical_red+0x214>
			return true;
		}
	}
	if(board[2][4] == PLAYER_2) {
    15fe:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <board+0xe>
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	51 f4       	brne	.+20     	; 0x161a <check_vertical_red+0x1ac>
		if (board[2][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[2][1] == PLAYER_2) {
    1606:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <board+0xd>
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	31 f4       	brne	.+12     	; 0x161a <check_vertical_red+0x1ac>
    160e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    1612:	82 30       	cpi	r24, 0x02	; 2
    1614:	11 f4       	brne	.+4      	; 0x161a <check_vertical_red+0x1ac>
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	b1 f1       	breq	.+108    	; 0x1686 <check_vertical_red+0x218>
			return true;
		}
	}
	if(board[3][4] == PLAYER_2) {
    161a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <board+0x13>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	51 f4       	brne	.+20     	; 0x1636 <check_vertical_red+0x1c8>
		if (board[3][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][1] == PLAYER_2) {
    1622:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	31 f4       	brne	.+12     	; 0x1636 <check_vertical_red+0x1c8>
    162a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	11 f4       	brne	.+4      	; 0x1636 <check_vertical_red+0x1c8>
    1632:	32 30       	cpi	r19, 0x02	; 2
    1634:	51 f1       	breq	.+84     	; 0x168a <check_vertical_red+0x21c>
			return true;
		}
	}
	if(board[4][4] == PLAYER_2) {
    1636:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <board+0x18>
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	41 f5       	brne	.+80     	; 0x168e <check_vertical_red+0x220>
		if (board[4][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[4][1] == PLAYER_2) {
    163e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <board+0x17>
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	31 f5       	brne	.+76     	; 0x1692 <check_vertical_red+0x224>
    1646:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	21 f5       	brne	.+72     	; 0x1696 <check_vertical_red+0x228>
    164e:	42 30       	cpi	r20, 0x02	; 2
    1650:	21 f1       	breq	.+72     	; 0x169a <check_vertical_red+0x22c>
			return true;
		}
	}

	return false;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	08 95       	ret

bool check_vertical_red(void) {
	// from left
	if(board[0][0] == PLAYER_2) {
		if (board[0][1] == PLAYER_2 && board[0][2] == PLAYER_2 && board[0][3] == PLAYER_2) {
			return true;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	08 95       	ret
		}
	}
	if(board[1][0] == PLAYER_2) {
		if (board[1][1] == PLAYER_2 && board[1][2] == PLAYER_2 && board[1][3] == PLAYER_2) {
			return true;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	08 95       	ret
		}
	}
	if(board[2][0] == PLAYER_2) {
		if (board[2][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[2][3] == PLAYER_2) {
			return true;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	08 95       	ret
		}
	}
	if(board[3][0] == PLAYER_2) {
		if (board[3][1] == PLAYER_2 && board[3][2] == PLAYER_2 && board[3][3] == PLAYER_2) {
			return true;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	08 95       	ret
		}
	}
	if(board[4][0] == PLAYER_2) {
		if (board[4][1] == PLAYER_2 && board[4][2] == PLAYER_2 && board[4][3] == PLAYER_2) {
			return true;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	08 95       	ret
		}
	}
	//from middle left and middle right
	if(board[0][1] == PLAYER_2) {
		if (board[0][2] == PLAYER_2 && board[0][3] == PLAYER_2 && board[0][4] == PLAYER_2) {
			return true;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	08 95       	ret
		}
	}
	if(board[1][1] == PLAYER_2) {
		if (board[1][2] == PLAYER_2 && board[1][3] == PLAYER_2 && board[1][4] == PLAYER_2) {
			return true;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	08 95       	ret
		}
	}
	if(board[2][1] == PLAYER_2) {
		if (board[2][2] == PLAYER_2 && board[2][3] == PLAYER_2 && board[2][4] == PLAYER_2) {
			return true;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	08 95       	ret
		}
	}
	if(board[3][1] == PLAYER_2) {
		if (board[3][2] == PLAYER_2 && board[3][3] == PLAYER_2 && board[3][4] == PLAYER_2) {
			return true;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	08 95       	ret
		}
	}
	if(board[4][1] == PLAYER_2) {
		if (board[4][2] == PLAYER_2 && board[4][3] == PLAYER_2 && board[4][4] == PLAYER_2) {
			return true;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	08 95       	ret
		}
	}
	// from right
	if(board[0][4] == PLAYER_2) {
		if (board[0][3] == PLAYER_2 && board[0][2] == PLAYER_2 && board[0][1] == PLAYER_2) {
			return true;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret
		}
	}
	if(board[1][4] == PLAYER_2) {
		if (board[1][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][1] == PLAYER_2) {
			return true;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	08 95       	ret
		}
	}
	if(board[2][4] == PLAYER_2) {
		if (board[2][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[2][1] == PLAYER_2) {
			return true;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	08 95       	ret
		}
	}
	if(board[3][4] == PLAYER_2) {
		if (board[3][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][1] == PLAYER_2) {
			return true;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	08 95       	ret
		if (board[4][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[4][1] == PLAYER_2) {
			return true;
		}
	}

	return false;
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	08 95       	ret
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	08 95       	ret
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
			return true;
		}
	}
	if(board[4][4] == PLAYER_2) {
		if (board[4][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[4][1] == PLAYER_2) {
			return true;
    169a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return false;
}
    169c:	08 95       	ret

0000169e <check_diagonal_down>:

bool check_diagonal_down(void) {
	if (board[0][0] == PLAYER_1 && board[1][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][3] == PLAYER_1) {
    169e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <board>
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	61 f4       	brne	.+24     	; 0x16be <check_diagonal_down+0x20>
    16a6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <board+0x6>
    16aa:	91 30       	cpi	r25, 0x01	; 1
    16ac:	41 f4       	brne	.+16     	; 0x16be <check_diagonal_down+0x20>
    16ae:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <board+0xc>
    16b2:	91 30       	cpi	r25, 0x01	; 1
    16b4:	21 f4       	brne	.+8      	; 0x16be <check_diagonal_down+0x20>
    16b6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <board+0x12>
    16ba:	91 30       	cpi	r25, 0x01	; 1
    16bc:	71 f1       	breq	.+92     	; 0x171a <check_diagonal_down+0x7c>
		return true;
	} else if (board[0][0] == PLAYER_2 && board[1][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][3] == PLAYER_2) {
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	61 f4       	brne	.+24     	; 0x16da <check_diagonal_down+0x3c>
    16c2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	41 f4       	brne	.+16     	; 0x16da <check_diagonal_down+0x3c>
    16ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	21 f4       	brne	.+8      	; 0x16da <check_diagonal_down+0x3c>
    16d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	11 f1       	breq	.+68     	; 0x171e <check_diagonal_down+0x80>
		return true;
	} else if (board[4][4] == PLAYER_2 && board[3][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][1] == PLAYER_2) {
    16da:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <board+0x18>
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	61 f4       	brne	.+24     	; 0x16fa <check_diagonal_down+0x5c>
    16e2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <board+0x12>
    16e6:	92 30       	cpi	r25, 0x02	; 2
    16e8:	41 f4       	brne	.+16     	; 0x16fa <check_diagonal_down+0x5c>
    16ea:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <board+0xc>
    16ee:	92 30       	cpi	r25, 0x02	; 2
    16f0:	21 f4       	brne	.+8      	; 0x16fa <check_diagonal_down+0x5c>
    16f2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <board+0x6>
    16f6:	92 30       	cpi	r25, 0x02	; 2
    16f8:	a1 f0       	breq	.+40     	; 0x1722 <check_diagonal_down+0x84>
		return true;
	} else if (board[4][4] == PLAYER_1 && board[3][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][1] == PLAYER_1) {
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <check_diagonal_down+0x88>
    16fe:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <board+0x12>
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 f4       	brne	.+36     	; 0x172a <check_diagonal_down+0x8c>
    1706:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	81 f4       	brne	.+32     	; 0x172e <check_diagonal_down+0x90>
    170e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <board+0x6>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	71 f0       	breq	.+28     	; 0x1732 <check_diagonal_down+0x94>
		return true;
	}
	return false;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	08 95       	ret
	return false;
}

bool check_diagonal_down(void) {
	if (board[0][0] == PLAYER_1 && board[1][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][3] == PLAYER_1) {
		return true;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	08 95       	ret
	} else if (board[0][0] == PLAYER_2 && board[1][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][3] == PLAYER_2) {
		return true;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	08 95       	ret
	} else if (board[4][4] == PLAYER_2 && board[3][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][1] == PLAYER_2) {
		return true;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	08 95       	ret
	} else if (board[4][4] == PLAYER_1 && board[3][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][1] == PLAYER_1) {
		return true;
	}
	return false;
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	08 95       	ret
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	08 95       	ret
	} else if (board[0][0] == PLAYER_2 && board[1][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][3] == PLAYER_2) {
		return true;
	} else if (board[4][4] == PLAYER_2 && board[3][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][1] == PLAYER_2) {
		return true;
	} else if (board[4][4] == PLAYER_1 && board[3][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][1] == PLAYER_1) {
		return true;
    1732:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
	
}
    1734:	08 95       	ret

00001736 <check_diagonal_up>:

bool check_diagonal_up(void) {
	if (board[0][4] == PLAYER_1 && board[1][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][1] == PLAYER_1) {
    1736:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <board+0x4>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	61 f4       	brne	.+24     	; 0x1756 <check_diagonal_up+0x20>
    173e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <board+0x8>
    1742:	91 30       	cpi	r25, 0x01	; 1
    1744:	41 f4       	brne	.+16     	; 0x1756 <check_diagonal_up+0x20>
    1746:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <board+0xc>
    174a:	91 30       	cpi	r25, 0x01	; 1
    174c:	21 f4       	brne	.+8      	; 0x1756 <check_diagonal_up+0x20>
    174e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <board+0x10>
    1752:	91 30       	cpi	r25, 0x01	; 1
    1754:	71 f1       	breq	.+92     	; 0x17b2 <check_diagonal_up+0x7c>
		return true;
	} else if (board[4][0] == PLAYER_2 && board[3][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][3] == PLAYER_2) {
    1756:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <board+0x14>
    175a:	92 30       	cpi	r25, 0x02	; 2
    175c:	61 f4       	brne	.+24     	; 0x1776 <check_diagonal_up+0x40>
    175e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <board+0x10>
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	41 f4       	brne	.+16     	; 0x1776 <check_diagonal_up+0x40>
    1766:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <board+0xc>
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	21 f4       	brne	.+8      	; 0x1776 <check_diagonal_up+0x40>
    176e:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <board+0x8>
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	01 f1       	breq	.+64     	; 0x17b6 <check_diagonal_up+0x80>
		return true;
	} else if (board[0][4] == PLAYER_2 && board[1][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][1] == PLAYER_2) {
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	61 f4       	brne	.+24     	; 0x1792 <check_diagonal_up+0x5c>
    177a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	41 f4       	brne	.+16     	; 0x1792 <check_diagonal_up+0x5c>
    1782:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	21 f4       	brne	.+8      	; 0x1792 <check_diagonal_up+0x5c>
    178a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	a1 f0       	breq	.+40     	; 0x17ba <check_diagonal_up+0x84>
		return true;
	} else if (board[4][0] == PLAYER_1 && board[3][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][3] == PLAYER_1) {
    1792:	91 30       	cpi	r25, 0x01	; 1
    1794:	a1 f4       	brne	.+40     	; 0x17be <check_diagonal_up+0x88>
    1796:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <board+0x10>
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 f4       	brne	.+36     	; 0x17c2 <check_diagonal_up+0x8c>
    179e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <board+0xc>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	81 f4       	brne	.+32     	; 0x17c6 <check_diagonal_up+0x90>
    17a6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <board+0x8>
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	71 f0       	breq	.+28     	; 0x17ca <check_diagonal_up+0x94>
		return true;
	}
	return false;
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	08 95       	ret
	
}

bool check_diagonal_up(void) {
	if (board[0][4] == PLAYER_1 && board[1][3] == PLAYER_1 && board[2][2] == PLAYER_1 && board[3][1] == PLAYER_1) {
		return true;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	08 95       	ret
	} else if (board[4][0] == PLAYER_2 && board[3][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][3] == PLAYER_2) {
		return true;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	08 95       	ret
	} else if (board[0][4] == PLAYER_2 && board[1][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][1] == PLAYER_2) {
		return true;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	08 95       	ret
	} else if (board[4][0] == PLAYER_1 && board[3][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][3] == PLAYER_1) {
		return true;
	}
	return false;
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	08 95       	ret
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	08 95       	ret
	} else if (board[4][0] == PLAYER_2 && board[3][1] == PLAYER_2 && board[2][2] == PLAYER_2 && board[1][3] == PLAYER_2) {
		return true;
	} else if (board[0][4] == PLAYER_2 && board[1][3] == PLAYER_2 && board[2][2] == PLAYER_2 && board[3][1] == PLAYER_2) {
		return true;
	} else if (board[4][0] == PLAYER_1 && board[3][1] == PLAYER_1 && board[2][2] == PLAYER_1 && board[1][3] == PLAYER_1) {
		return true;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
    17cc:	08 95       	ret

000017ce <get_current_player>:
uint8_t get_current_player(void) {
	if (current_player == PLAYER_1) {
    17ce:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <current_player>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	21 f0       	breq	.+8      	; 0x17de <get_current_player+0x10>
		return PLAYER_2;
	} else if (current_player == PLAYER_2) {
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	19 f4       	brne	.+6      	; 0x17e0 <get_current_player+0x12>
		return PLAYER_1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	08 95       	ret
	}
	return false;
}
uint8_t get_current_player(void) {
	if (current_player == PLAYER_1) {
		return PLAYER_2;
    17de:	82 e0       	ldi	r24, 0x02	; 2
	} else if (current_player == PLAYER_2) {
		return PLAYER_1;
	}
	return current_player;
}
    17e0:	08 95       	ret

000017e2 <is_game_over>:
uint8_t is_game_over(void) {
	// YOUR CODE HERE
	if (check_vertical() == true || check_horizontal() == true || check_diagonal_down() == true || check_horizontal_red() == true || check_vertical_red() == true || check_diagonal_up() == true) {
    17e2:	0e 94 1f 09 	call	0x123e	; 0x123e <check_vertical>
    17e6:	81 11       	cpse	r24, r1
    17e8:	15 c0       	rjmp	.+42     	; 0x1814 <is_game_over+0x32>
    17ea:	0e 94 01 07 	call	0xe02	; 0xe02 <check_horizontal>
    17ee:	81 11       	cpse	r24, r1
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <is_game_over+0x36>
    17f2:	0e 94 4f 0b 	call	0x169e	; 0x169e <check_diagonal_down>
    17f6:	81 11       	cpse	r24, r1
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <is_game_over+0x3a>
    17fa:	0e 94 10 08 	call	0x1020	; 0x1020 <check_horizontal_red>
    17fe:	81 11       	cpse	r24, r1
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <is_game_over+0x3e>
    1802:	0e 94 37 0a 	call	0x146e	; 0x146e <check_vertical_red>
    1806:	81 11       	cpse	r24, r1
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <is_game_over+0x42>
    180a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <check_diagonal_up>
    180e:	81 11       	cpse	r24, r1
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <is_game_over+0x46>
    1812:	08 95       	ret
		
		return 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	08 95       	ret
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	08 95       	ret
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	08 95       	ret
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	08 95       	ret
    1828:	81 e0       	ldi	r24, 0x01	; 1
	}
	// Detect if the game is over i.e. if a player has won.
	return 0;
    182a:	08 95       	ret

0000182c <get_adc_values>:
}

// Helper function to retrieve and convert ADC values
static void get_adc_values(void) {
	// Read x axis
	ADMUX &= ~1;
    182c:	ec e7       	ldi	r30, 0x7C	; 124
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8e 7f       	andi	r24, 0xFE	; 254
    1834:	80 83       	st	Z, r24
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1836:	ea e7       	ldi	r30, 0x7A	; 122
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {
    1840:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1844:	86 fd       	sbrc	r24, 6
    1846:	fc cf       	rjmp	.-8      	; 0x1840 <get_adc_values+0x14>
		; /* Wait until conversion finished */
	}
	adc_x = ADC; // Read the value
    1848:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    184c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1850:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <adc_x+0x1>
    1854:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <adc_x>

	// Read y axis
	ADMUX |= 1;
    1858:	ec e7       	ldi	r30, 0x7C	; 124
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	80 83       	st	Z, r24
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1862:	ea e7       	ldi	r30, 0x7A	; 122
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 64       	ori	r24, 0x40	; 64
    186a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {
    186c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1870:	86 fd       	sbrc	r24, 6
    1872:	fc cf       	rjmp	.-8      	; 0x186c <get_adc_values+0x40>
		; /* Wait until conversion finished */
	}
	adc_y = ADC; // Read the value
    1874:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1878:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    187c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <adc_y+0x1>
    1880:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <adc_y>
    1884:	08 95       	ret

00001886 <init_joystick>:
static uint8_t prev_direction = 0;
static uint32_t prev_time;

void init_joystick(void) {
	// Set up ADC - AVCC reference, right adjust
	ADMUX = (1<<REFS0);
    1886:	80 e4       	ldi	r24, 0x40	; 64
    1888:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Turn on the ADC  and choose clock divider of 64
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    188c:	86 e8       	ldi	r24, 0x86	; 134
    188e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1892:	08 95       	ret

00001894 <joystick_direction>:
		; /* Wait until conversion finished */
	}
	adc_y = ADC; // Read the value
}

uint8_t joystick_direction(void) {
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
	 * -1 = middle
	 */
	uint8_t direction;
	uint32_t current_time;

	get_adc_values();
    189a:	0e 94 16 0c 	call	0x182c	; 0x182c <get_adc_values>
	if(adc_x < 257) {
    189e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <adc_x>
    18a2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <adc_x+0x1>
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	92 07       	cpc	r25, r18
    18ac:	70 f1       	brcs	.+92     	; 0x190a <joystick_direction+0x76>
		direction = 3;
	} else if(adc_x > 768) {
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	43 e0       	ldi	r20, 0x03	; 3
    18b2:	94 07       	cpc	r25, r20
    18b4:	60 f5       	brcc	.+88     	; 0x190e <joystick_direction+0x7a>
		direction = 4;
	} else if(adc_y > 768) {
    18b6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <adc_y>
    18ba:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <adc_y+0x1>
    18be:	21 30       	cpi	r18, 0x01	; 1
    18c0:	43 e0       	ldi	r20, 0x03	; 3
    18c2:	34 07       	cpc	r19, r20
    18c4:	30 f5       	brcc	.+76     	; 0x1912 <joystick_direction+0x7e>
		direction = 1;
	} else if(adc_y < 257) {
    18c6:	21 30       	cpi	r18, 0x01	; 1
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	34 07       	cpc	r19, r20
    18cc:	20 f1       	brcs	.+72     	; 0x1916 <joystick_direction+0x82>
		direction = 2;
	} else {
		if(prev_direction == 3) {
    18ce:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <prev_direction>
    18d2:	43 30       	cpi	r20, 0x03	; 3
    18d4:	29 f4       	brne	.+10     	; 0x18e0 <joystick_direction+0x4c>
			direction = (adc_x < 386 ? 3:-1);
    18d6:	82 38       	cpi	r24, 0x82	; 130
    18d8:	91 40       	sbci	r25, 0x01	; 1
    18da:	f8 f4       	brcc	.+62     	; 0x191a <joystick_direction+0x86>
    18dc:	c3 e0       	ldi	r28, 0x03	; 3
    18de:	26 c0       	rjmp	.+76     	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 4) {
    18e0:	44 30       	cpi	r20, 0x04	; 4
    18e2:	29 f4       	brne	.+10     	; 0x18ee <joystick_direction+0x5a>
			direction = (adc_x > 641 ? 4:-1);
    18e4:	82 38       	cpi	r24, 0x82	; 130
    18e6:	92 40       	sbci	r25, 0x02	; 2
    18e8:	d0 f0       	brcs	.+52     	; 0x191e <joystick_direction+0x8a>
    18ea:	c4 e0       	ldi	r28, 0x04	; 4
    18ec:	1f c0       	rjmp	.+62     	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 1) {
    18ee:	41 30       	cpi	r20, 0x01	; 1
    18f0:	29 f4       	brne	.+10     	; 0x18fc <joystick_direction+0x68>
			direction = (adc_y > 641 ? 1:-1);
    18f2:	22 38       	cpi	r18, 0x82	; 130
    18f4:	32 40       	sbci	r19, 0x02	; 2
    18f6:	a8 f0       	brcs	.+42     	; 0x1922 <joystick_direction+0x8e>
    18f8:	c1 e0       	ldi	r28, 0x01	; 1
    18fa:	18 c0       	rjmp	.+48     	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 2) {
    18fc:	42 30       	cpi	r20, 0x02	; 2
    18fe:	99 f4       	brne	.+38     	; 0x1926 <joystick_direction+0x92>
			direction = (adc_y < 386 ? 2:-1);
    1900:	22 38       	cpi	r18, 0x82	; 130
    1902:	31 40       	sbci	r19, 0x01	; 1
    1904:	90 f4       	brcc	.+36     	; 0x192a <joystick_direction+0x96>
    1906:	c2 e0       	ldi	r28, 0x02	; 2
    1908:	11 c0       	rjmp	.+34     	; 0x192c <joystick_direction+0x98>
	uint8_t direction;
	uint32_t current_time;

	get_adc_values();
	if(adc_x < 257) {
		direction = 3;
    190a:	c3 e0       	ldi	r28, 0x03	; 3
    190c:	0f c0       	rjmp	.+30     	; 0x192c <joystick_direction+0x98>
	} else if(adc_x > 768) {
		direction = 4;
    190e:	c4 e0       	ldi	r28, 0x04	; 4
    1910:	0d c0       	rjmp	.+26     	; 0x192c <joystick_direction+0x98>
	} else if(adc_y > 768) {
		direction = 1;
    1912:	c1 e0       	ldi	r28, 0x01	; 1
    1914:	0b c0       	rjmp	.+22     	; 0x192c <joystick_direction+0x98>
	} else if(adc_y < 257) {
		direction = 2;
    1916:	c2 e0       	ldi	r28, 0x02	; 2
    1918:	09 c0       	rjmp	.+18     	; 0x192c <joystick_direction+0x98>
	} else {
		if(prev_direction == 3) {
			direction = (adc_x < 386 ? 3:-1);
    191a:	cf ef       	ldi	r28, 0xFF	; 255
    191c:	07 c0       	rjmp	.+14     	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 4) {
			direction = (adc_x > 641 ? 4:-1);
    191e:	cf ef       	ldi	r28, 0xFF	; 255
    1920:	05 c0       	rjmp	.+10     	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 1) {
			direction = (adc_y > 641 ? 1:-1);
    1922:	cf ef       	ldi	r28, 0xFF	; 255
    1924:	03 c0       	rjmp	.+6      	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 2) {
			direction = (adc_y < 386 ? 2:-1);
		} else {
			direction = -1;
    1926:	cf ef       	ldi	r28, 0xFF	; 255
    1928:	01 c0       	rjmp	.+2      	; 0x192c <joystick_direction+0x98>
		} else if(prev_direction == 4) {
			direction = (adc_x > 641 ? 4:-1);
		} else if(prev_direction == 1) {
			direction = (adc_y > 641 ? 1:-1);
		} else if(prev_direction == 2) {
			direction = (adc_y < 386 ? 2:-1);
    192a:	cf ef       	ldi	r28, 0xFF	; 255
			direction = -1;
		}
	}

	// Only process if joystick not in middle
	if(direction > 0) {
    192c:	cc 23       	and	r28, r28
    192e:	29 f1       	breq	.+74     	; 0x197a <joystick_direction+0xe6>
		// If same direction as previously, check if 500ms has elapsed
		// (auto fire) or else assume at middle
		if(prev_direction == direction) {
    1930:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <prev_direction>
    1934:	c8 13       	cpse	r28, r24
    1936:	13 c0       	rjmp	.+38     	; 0x195e <joystick_direction+0xca>
			current_time = get_current_time();
    1938:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <get_current_time>
			if(current_time < prev_time + 300) {
    193c:	00 91 2d 01 	lds	r16, 0x012D	; 0x80012d <prev_time>
    1940:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <prev_time+0x1>
    1944:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <prev_time+0x2>
    1948:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <prev_time+0x3>
    194c:	04 5d       	subi	r16, 0xD4	; 212
    194e:	1e 4f       	sbci	r17, 0xFE	; 254
    1950:	2f 4f       	sbci	r18, 0xFF	; 255
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	60 17       	cp	r22, r16
    1956:	71 07       	cpc	r23, r17
    1958:	82 07       	cpc	r24, r18
    195a:	93 07       	cpc	r25, r19
    195c:	80 f0       	brcs	.+32     	; 0x197e <joystick_direction+0xea>
				return -1;
			}
		}

		prev_direction = direction;
    195e:	c0 93 31 01 	sts	0x0131, r28	; 0x800131 <prev_direction>
		prev_time = get_current_time();
    1962:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <get_current_time>
    1966:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <prev_time>
    196a:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <prev_time+0x1>
    196e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <prev_time+0x2>
    1972:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <prev_time+0x3>
	}

	return direction;
    1976:	8c 2f       	mov	r24, r28
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <joystick_direction+0xec>
    197a:	8c 2f       	mov	r24, r28
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <joystick_direction+0xec>
		// If same direction as previously, check if 500ms has elapsed
		// (auto fire) or else assume at middle
		if(prev_direction == direction) {
			current_time = get_current_time();
			if(current_time < prev_time + 300) {
				return -1;
    197e:	8f ef       	ldi	r24, 0xFF	; 255
		prev_direction = direction;
		prev_time = get_current_time();
	}

	return direction;
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1988:	80 e8       	ldi	r24, 0x80	; 128
    198a:	0e 94 16 10 	call	0x202c	; 0x202c <spi_setup_master>
    198e:	08 95       	ret

00001990 <ledmatrix_update_pixel>:
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	80 31       	cpi	r24, 0x10	; 16
    1998:	b0 f4       	brcc	.+44     	; 0x19c6 <ledmatrix_update_pixel+0x36>
    199a:	68 30       	cpi	r22, 0x08	; 8
    199c:	a0 f4       	brcc	.+40     	; 0x19c6 <ledmatrix_update_pixel+0x36>
    199e:	14 2f       	mov	r17, r20
    19a0:	c6 2f       	mov	r28, r22
    19a2:	d8 2f       	mov	r29, r24
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19aa:	6c 2f       	mov	r22, r28
    19ac:	67 70       	andi	r22, 0x07	; 7
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	68 9f       	mul	r22, r24
    19b2:	90 01       	movw	r18, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	8d 2f       	mov	r24, r29
    19b8:	8f 70       	andi	r24, 0x0F	; 15
    19ba:	82 2b       	or	r24, r18
    19bc:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19c0:	81 2f       	mov	r24, r17
    19c2:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	08 95       	ret

000019ce <ledmatrix_update_row>:
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	88 30       	cpi	r24, 0x08	; 8
    19d6:	a0 f4       	brcc	.+40     	; 0x1a00 <ledmatrix_update_row+0x32>
    19d8:	8b 01       	movw	r16, r22
    19da:	c8 2f       	mov	r28, r24
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19e2:	8c 2f       	mov	r24, r28
    19e4:	87 70       	andi	r24, 0x07	; 7
    19e6:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19ea:	c0 e0       	ldi	r28, 0x00	; 0
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <ledmatrix_update_row+0x2e>
    19ee:	f8 01       	movw	r30, r16
    19f0:	ec 0f       	add	r30, r28
    19f2:	f1 1d       	adc	r31, r1
    19f4:	80 81       	ld	r24, Z
    19f6:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    19fa:	cf 5f       	subi	r28, 0xFF	; 255
    19fc:	c0 31       	cpi	r28, 0x10	; 16
    19fe:	b8 f3       	brcs	.-18     	; 0x19ee <ledmatrix_update_row+0x20>
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <ledmatrix_update_column>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	80 31       	cpi	r24, 0x10	; 16
    1a10:	a0 f4       	brcc	.+40     	; 0x1a3a <ledmatrix_update_column+0x32>
    1a12:	8b 01       	movw	r16, r22
    1a14:	c8 2f       	mov	r28, r24
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    1a1c:	8c 2f       	mov	r24, r28
    1a1e:	8f 70       	andi	r24, 0x0F	; 15
    1a20:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    1a24:	c0 e0       	ldi	r28, 0x00	; 0
    1a26:	07 c0       	rjmp	.+14     	; 0x1a36 <ledmatrix_update_column+0x2e>
    1a28:	f8 01       	movw	r30, r16
    1a2a:	ec 0f       	add	r30, r28
    1a2c:	f1 1d       	adc	r31, r1
    1a2e:	80 81       	ld	r24, Z
    1a30:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    1a34:	cf 5f       	subi	r28, 0xFF	; 255
    1a36:	c8 30       	cpi	r28, 0x08	; 8
    1a38:	b8 f3       	brcs	.-18     	; 0x1a28 <ledmatrix_update_column+0x20>
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1a42:	8f e0       	ldi	r24, 0x0F	; 15
    1a44:	0e 94 42 10 	call	0x2084	; 0x2084 <spi_send_byte>
    1a48:	08 95       	ret

00001a4a <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    1a4a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <ledmatrix_setup>
	init_button_interrupts();
    1a4e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <init_button_interrupts>
	init_joystick();
    1a52:	0e 94 43 0c 	call	0x1886	; 0x1886 <init_joystick>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	7b e4       	ldi	r23, 0x4B	; 75
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <init_serial_stdio>
	
	init_timer0();
    1a64:	0e 94 62 10 	call	0x20c4	; 0x20c4 <init_timer0>
	DDRD = (1<<7);
    1a68:	80 e8       	ldi	r24, 0x80	; 128
    1a6a:	8a b9       	out	0x0a, r24	; 10
	OCR2A = cycles;
    1a6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cycles>
    1a70:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Turn on global interrupts
	sei();
    1a74:	78 94       	sei
    1a76:	08 95       	ret

00001a78 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    1a78:	0e 94 59 10 	call	0x20b2	; 0x20b2 <clear_terminal>
	move_terminal_cursor(10,10);
    1a7c:	6a e0       	ldi	r22, 0x0A	; 10
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	8a e0       	ldi	r24, 0x0A	; 10
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("Teeko"));
    1a88:	8d e8       	ldi	r24, 0x8D	; 141
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	move_terminal_cursor(10,12);
    1a94:	6c e0       	ldi	r22, 0x0C	; 12
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Jean-Pierre Le Roux 45839573"));
    1aa0:	87 e5       	ldi	r24, 0x57	; 87
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
    1aac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <start_display>
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
    1ab8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <serial_input_available>
    1abc:	88 23       	and	r24, r24
    1abe:	39 f0       	breq	.+14     	; 0x1ace <start_screen+0x56>
			serial_input = fgetc(stdin);
    1ac0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__iob>
    1ac4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__iob+0x1>
    1ac8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fgetc>
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
    1ad0:	83 37       	cpi	r24, 0x73	; 115
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <start_screen+0x68>
    1ad4:	83 35       	cpi	r24, 0x53	; 83
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
    1ad8:	0e 94 00 01 	call	0x200	; 0x200 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
    1adc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ade:	61 f3       	breq	.-40     	; 0x1ab8 <start_screen+0x40>
    1ae0:	08 95       	ret

00001ae2 <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1ae2:	0e 94 59 10 	call	0x20b2	; 0x20b2 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
    1ae6:	0e 94 45 02 	call	0x48a	; 0x48a <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1aea:	0e 94 00 01 	call	0x200	; 0x200 <button_pushed>
	clear_serial_input_buffer();
    1aee:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <clear_serial_input_buffer>
    1af2:	08 95       	ret

00001af4 <handle_game_over>:
	// We get here if the game is over.
}

void handle_game_over() {
	
	move_terminal_cursor(10,13);
    1af4:	6d e0       	ldi	r22, 0x0D	; 13
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	8a e0       	ldi	r24, 0x0A	; 10
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("player %d is the winner"), get_current_player());
    1b00:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <get_current_player>
    1b04:	1f 92       	push	r1
    1b06:	8f 93       	push	r24
    1b08:	8d e0       	ldi	r24, 0x0D	; 13
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	9f 93       	push	r25
    1b0e:	8f 93       	push	r24
    1b10:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	move_terminal_cursor(10,14);
    1b14:	6e e0       	ldi	r22, 0x0E	; 14
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	9f 93       	push	r25
    1b26:	8f 93       	push	r24
    1b28:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	move_terminal_cursor(10,15);
    1b2c:	6f e0       	ldi	r22, 0x0F	; 15
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	8a e0       	ldi	r24, 0x0A	; 10
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("Press any IOboard button twice"));
    1b38:	84 ee       	ldi	r24, 0xE4	; 228
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9f 93       	push	r25
    1b3e:	8f 93       	push	r24
    1b40:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1b44:	8d b7       	in	r24, 0x3d	; 61
    1b46:	9e b7       	in	r25, 0x3e	; 62
    1b48:	08 96       	adiw	r24, 0x08	; 8
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	9e bf       	out	0x3e, r25	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	8d bf       	out	0x3d, r24	; 61
    1b54:	0e 94 00 01 	call	0x200	; 0x200 <button_pushed>
    1b58:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5a:	e1 f3       	breq	.-8      	; 0x1b54 <handle_game_over+0x60>
		;
	}
	
}
    1b5c:	08 95       	ret

00001b5e <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    1b5e:	8f 92       	push	r8
    1b60:	9f 92       	push	r9
    1b62:	af 92       	push	r10
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
	uint32_t last_flash_time, current_time;
	uint8_t btn, joystick; //the button pushed
	move_terminal_cursor(30,7);
    1b74:	67 e0       	ldi	r22, 0x07	; 7
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	8e e1       	ldi	r24, 0x1E	; 30
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
	printf_P(PSTR("Current Player: 1 (green)"));
    1b80:	8d e3       	ldi	r24, 0x3D	; 61
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	9f 93       	push	r25
    1b86:	8f 93       	push	r24
    1b88:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
	char serial_input;
	last_flash_time = get_current_time();
    1b8c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <get_current_time>
    1b90:	4b 01       	movw	r8, r22
    1b92:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while(!is_game_over()) {
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	df c0       	rjmp	.+446    	; 0x1d58 <play_game+0x1fa>
		joystick = joystick_direction();
    1b9a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <joystick_direction>
    1b9e:	18 2f       	mov	r17, r24
		if (is_game_over() == 1) {
    1ba0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <play_game+0x4e>
			handle_game_over();
    1ba8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
		}
		int count = 0;
		serial_input = -1;
		if (serial_input_available()) {
    1bac:	0e 94 75 0f 	call	0x1eea	; 0x1eea <serial_input_available>
    1bb0:	88 23       	and	r24, r24
    1bb2:	41 f0       	breq	.+16     	; 0x1bc4 <play_game+0x66>
			serial_input = fgetc(stdin);
    1bb4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__iob>
    1bb8:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__iob+0x1>
    1bbc:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fgetc>
    1bc0:	c8 2f       	mov	r28, r24
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <play_game+0x68>
		joystick = joystick_direction();
		if (is_game_over() == 1) {
			handle_game_over();
		}
		int count = 0;
		serial_input = -1;
    1bc4:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
    1bc6:	0e 94 00 01 	call	0x200	; 0x200 <button_pushed>
    1bca:	d8 2f       	mov	r29, r24
		if (serial_input == 's' || serial_input == 'S' || btn == BUTTON0_PUSHED || joystick == 3) {
    1bcc:	c3 37       	cpi	r28, 0x73	; 115
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <play_game+0x7e>
    1bd0:	c3 35       	cpi	r28, 0x53	; 83
    1bd2:	21 f0       	breq	.+8      	; 0x1bdc <play_game+0x7e>
    1bd4:	88 23       	and	r24, r24
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <play_game+0x7e>
    1bd8:	13 30       	cpi	r17, 0x03	; 3
    1bda:	b1 f4       	brne	.+44     	; 0x1c08 <play_game+0xaa>
			// If button 0 is pushed, move down.
			move_display_cursor(0, -1);
    1bdc:	6f ef       	ldi	r22, 0xFF	; 255
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	0e 94 c3 06 	call	0xd86	; 0xd86 <move_display_cursor>
			if (Check_LEGAL() == true) {
    1be4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1be8:	88 23       	and	r24, r24
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <play_game+0x94>
				PORTD = 0xFF;
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	8b b9       	out	0x0b, r24	; 11
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <play_game+0x9e>
			} else if (Check_LEGAL() == false) {
    1bf2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <play_game+0x9e>
				PORTD = 0x00; // turns off all LEDs
    1bfa:	1b b8       	out	0x0b, r1	; 11
			}
			if (is_game_over() == 1) {
    1bfc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <play_game+0xaa>
				handle_game_over();
    1c04:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
			}
		}
		if (serial_input == 'w' || serial_input == 'W' || btn == BUTTON1_PUSHED || joystick == 4) {
    1c08:	c7 37       	cpi	r28, 0x77	; 119
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <play_game+0xba>
    1c0c:	c7 35       	cpi	r28, 0x57	; 87
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <play_game+0xba>
    1c10:	d1 30       	cpi	r29, 0x01	; 1
    1c12:	11 f0       	breq	.+4      	; 0x1c18 <play_game+0xba>
    1c14:	14 30       	cpi	r17, 0x04	; 4
    1c16:	b1 f4       	brne	.+44     	; 0x1c44 <play_game+0xe6>
			// If button 0 is pushed, move up.
			move_display_cursor(0, 1);
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	0e 94 c3 06 	call	0xd86	; 0xd86 <move_display_cursor>
			if (Check_LEGAL() == true) {
    1c20:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1c24:	88 23       	and	r24, r24
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <play_game+0xd0>
				PORTD = 0xFF;
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	8b b9       	out	0x0b, r24	; 11
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <play_game+0xda>
			} else if (Check_LEGAL() == false) {
    1c2e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1c32:	81 11       	cpse	r24, r1
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <play_game+0xda>
				PORTD = 0x00; // turns off all LEDs
    1c36:	1b b8       	out	0x0b, r1	; 11
			}
			if (is_game_over() == 1) {
    1c38:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <play_game+0xe6>
				handle_game_over();
    1c40:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
			}
		}
		if (serial_input == 'd' || serial_input == 'D' || btn == BUTTON2_PUSHED || joystick == 2) {
    1c44:	c4 36       	cpi	r28, 0x64	; 100
    1c46:	31 f0       	breq	.+12     	; 0x1c54 <play_game+0xf6>
    1c48:	c4 34       	cpi	r28, 0x44	; 68
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <play_game+0xf6>
    1c4c:	d2 30       	cpi	r29, 0x02	; 2
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <play_game+0xf6>
    1c50:	12 30       	cpi	r17, 0x02	; 2
    1c52:	b1 f4       	brne	.+44     	; 0x1c80 <play_game+0x122>
			// If button 0 is pushed, move right.
			move_display_cursor(1, 0);
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	0e 94 c3 06 	call	0xd86	; 0xd86 <move_display_cursor>
			if (Check_LEGAL() == true) {
    1c5c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1c60:	88 23       	and	r24, r24
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <play_game+0x10c>
				PORTD = 0xFF;
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	8b b9       	out	0x0b, r24	; 11
    1c68:	05 c0       	rjmp	.+10     	; 0x1c74 <play_game+0x116>
			} else if (Check_LEGAL() == false) {
    1c6a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <play_game+0x116>
				PORTD = 0x00; // turns off all LEDs
    1c72:	1b b8       	out	0x0b, r1	; 11
			}
			if (is_game_over() == 1) {
    1c74:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <play_game+0x122>
				handle_game_over();
    1c7c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
			}
		}
		if (serial_input == 'a' || serial_input == 'A' || btn == BUTTON3_PUSHED || joystick == 1) {
    1c80:	c1 36       	cpi	r28, 0x61	; 97
    1c82:	31 f0       	breq	.+12     	; 0x1c90 <play_game+0x132>
    1c84:	c1 34       	cpi	r28, 0x41	; 65
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <play_game+0x132>
    1c88:	d3 30       	cpi	r29, 0x03	; 3
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <play_game+0x132>
    1c8c:	11 30       	cpi	r17, 0x01	; 1
    1c8e:	b1 f4       	brne	.+44     	; 0x1cbc <play_game+0x15e>
			// If button 0 is pushed, move left.
			move_display_cursor(-1, 0);
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	0e 94 c3 06 	call	0xd86	; 0xd86 <move_display_cursor>
			if (Check_LEGAL() == true) {
    1c98:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1c9c:	88 23       	and	r24, r24
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <play_game+0x148>
				PORTD = 0xFF;
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	8b b9       	out	0x0b, r24	; 11
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <play_game+0x152>
			} else if (Check_LEGAL() == false) {
    1ca6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Check_LEGAL>
    1caa:	81 11       	cpse	r24, r1
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <play_game+0x152>
				PORTD = 0x00; // turns off all LEDs
    1cae:	1b b8       	out	0x0b, r1	; 11
			}
			if (is_game_over() == 1) {
    1cb0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	11 f4       	brne	.+4      	; 0x1cbc <play_game+0x15e>
				handle_game_over();
    1cb8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
			}
		}
		if (serial_input == ' ') {
    1cbc:	c0 32       	cpi	r28, 0x20	; 32
    1cbe:	49 f4       	brne	.+18     	; 0x1cd2 <play_game+0x174>
			if (count < 8) {
				place_piece();
    1cc0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <place_piece>
				PORTD = 0x00;
    1cc4:	1b b8       	out	0x0b, r1	; 11
			}
			if (is_game_over() == 1) {
    1cc6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <play_game+0x174>
				handle_game_over();
    1cce:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
			}
		}
		if (serial_input == 'P' || serial_input == 'p') {
    1cd2:	c0 35       	cpi	r28, 0x50	; 80
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <play_game+0x17c>
    1cd6:	c0 37       	cpi	r28, 0x70	; 112
    1cd8:	61 f5       	brne	.+88     	; 0x1d32 <play_game+0x1d4>
			// Pause game (display, controls and timers)
			move_terminal_cursor(30,6);
    1cda:	66 e0       	ldi	r22, 0x06	; 6
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	8e e1       	ldi	r24, 0x1E	; 30
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
			printf_P(PSTR("Game Paused"));
    1ce6:	81 e3       	ldi	r24, 0x31	; 49
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
			while(1) {
				serial_input = fgetc(stdin);
    1cf6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__iob>
    1cfa:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__iob+0x1>
    1cfe:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fgetc>
				if(serial_input == 'p' || serial_input == 'P') {
    1d02:	80 37       	cpi	r24, 0x70	; 112
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <play_game+0x1ac>
    1d06:	80 35       	cpi	r24, 0x50	; 80
    1d08:	b1 f7       	brne	.-20     	; 0x1cf6 <play_game+0x198>
					move_terminal_cursor(30,6);
    1d0a:	66 e0       	ldi	r22, 0x06	; 6
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	8e e1       	ldi	r24, 0x1E	; 30
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
					printf_P(PSTR("           "));
    1d16:	85 e2       	ldi	r24, 0x25	; 37
    1d18:	91 e0       	ldi	r25, 0x01	; 1
    1d1a:	9f 93       	push	r25
    1d1c:	8f 93       	push	r24
    1d1e:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
					move_terminal_cursor(37, 8);
    1d22:	68 e0       	ldi	r22, 0x08	; 8
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	85 e2       	ldi	r24, 0x25	; 37
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 48 10 	call	0x2090	; 0x2090 <move_terminal_cursor>
					break;
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
				}
			}
			
		}
	
		current_time = get_current_time();
    1d32:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <get_current_time>
    1d36:	6b 01       	movw	r12, r22
    1d38:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
    1d3a:	d5 01       	movw	r26, r10
    1d3c:	c4 01       	movw	r24, r8
    1d3e:	8c 50       	subi	r24, 0x0C	; 12
    1d40:	9e 4f       	sbci	r25, 0xFE	; 254
    1d42:	af 4f       	sbci	r26, 0xFF	; 255
    1d44:	bf 4f       	sbci	r27, 0xFF	; 255
    1d46:	c8 16       	cp	r12, r24
    1d48:	d9 06       	cpc	r13, r25
    1d4a:	ea 06       	cpc	r14, r26
    1d4c:	fb 06       	cpc	r15, r27
    1d4e:	20 f0       	brcs	.+8      	; 0x1d58 <play_game+0x1fa>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_cursor();
    1d50:	0e 94 82 02 	call	0x504	; 0x504 <flash_cursor>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
    1d54:	46 01       	movw	r8, r12
    1d56:	57 01       	movw	r10, r14
	printf_P(PSTR("Current Player: 1 (green)"));
	char serial_input;
	last_flash_time = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over()) {
    1d58:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <is_game_over>
    1d5c:	88 23       	and	r24, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <play_game+0x204>
    1d60:	1c cf       	rjmp	.-456    	; 0x1b9a <play_game+0x3c>
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	08 95       	ret

00001d7a <main>:
void handle_game_over(void);
/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1d7a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	start_screen();
    1d7e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
    1d82:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <new_game>
		play_game();
    1d86:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <play_game>
		handle_game_over();
    1d8a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <handle_game_over>
    1d8e:	f9 cf       	rjmp	.-14     	; 0x1d82 <main+0x8>

00001d90 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1d90:	cf 93       	push	r28
    1d92:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1d94:	8a 30       	cpi	r24, 0x0A	; 10
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1d98:	8d e0       	ldi	r24, 0x0D	; 13
    1d9a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1d9e:	9f b7       	in	r25, 0x3f	; 63
    1da0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1da4:	99 23       	and	r25, r25
    1da6:	29 f1       	breq	.+74     	; 0x1df2 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1da8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	d1 f3       	breq	.-12     	; 0x1da4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1db0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1db2:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <out_insert_pos>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	8e 0f       	add	r24, r30
    1dba:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <out_insert_pos>
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	e2 5a       	subi	r30, 0xA2	; 162
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1dc6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1dd0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <out_insert_pos>
    1dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1dd8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1ddc:	e1 ec       	ldi	r30, 0xC1	; 193
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1de6:	99 23       	and	r25, r25
    1de8:	39 f0       	breq	.+14     	; 0x1df8 <uart_put_char+0x68>
		sei();
    1dea:	78 94       	sei
	}
	return 0;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
}
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1e00:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1e04:	88 23       	and	r24, r24
    1e06:	e1 f3       	breq	.-8      	; 0x1e00 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1e08:	2f b7       	in	r18, 0x3f	; 63
    1e0a:	20 78       	andi	r18, 0x80	; 128
	cli();
    1e0c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1e0e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <input_insert_pos>
    1e12:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	83 1b       	sub	r24, r19
    1e1a:	91 09       	sbc	r25, r1
    1e1c:	5a f4       	brpl	.+22     	; 0x1e34 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1e1e:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <input_insert_pos>
    1e22:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	e8 1b       	sub	r30, r24
    1e2a:	f1 09       	sbc	r31, r1
    1e2c:	e2 59       	subi	r30, 0x92	; 146
    1e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e30:	80 81       	ld	r24, Z
    1e32:	0a c0       	rjmp	.+20     	; 0x1e48 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1e34:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <input_insert_pos>
    1e38:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	e8 1b       	sub	r30, r24
    1e40:	f1 09       	sbc	r31, r1
    1e42:	e2 5a       	subi	r30, 0xA2	; 162
    1e44:	fd 4f       	sbci	r31, 0xFD	; 253
    1e46:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1e48:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1e4c:	91 50       	subi	r25, 0x01	; 1
    1e4e:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1e52:	22 23       	and	r18, r18
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <uart_get_char+0x58>
		sei();
    1e56:	78 94       	sei
	}	
	return c;
}
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	08 95       	ret

00001e5c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1e5c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <out_insert_pos>
	bytes_in_out_buffer = 0;
    1e60:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <bytes_in_out_buffer>
	input_insert_pos = 0;
    1e64:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1e68:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <bytes_in_input_buffer>
	input_overrun = 0;
    1e6c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1e70:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	aa 1f       	adc	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	9c 01       	movw	r18, r24
    1e8a:	ad 01       	movw	r20, r26
    1e8c:	22 0f       	add	r18, r18
    1e8e:	33 1f       	adc	r19, r19
    1e90:	44 1f       	adc	r20, r20
    1e92:	55 1f       	adc	r21, r21
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	72 e1       	ldi	r23, 0x12	; 18
    1e98:	8a e7       	ldi	r24, 0x7A	; 122
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 af 10 	call	0x215e	; 0x215e <__divmodsi4>
    1ea0:	ba 01       	movw	r22, r20
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	4f 5f       	subi	r20, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	6f 4f       	sbci	r22, 0xFF	; 255
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	db 01       	movw	r26, r22
    1eae:	ca 01       	movw	r24, r20
    1eb0:	1a f4       	brpl	.+6      	; 0x1eb8 <init_serial_stdio+0x5c>
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	b1 1d       	adc	r27, r1
    1eb8:	b5 95       	asr	r27
    1eba:	a7 95       	ror	r26
    1ebc:	97 95       	ror	r25
    1ebe:	87 95       	ror	r24
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1ec2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1ec6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1eca:	e1 ec       	ldi	r30, 0xC1	; 193
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	88 e1       	ldi	r24, 0x18	; 24
    1ed0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1ed8:	e0 e7       	ldi	r30, 0x70	; 112
    1eda:	f2 e0       	ldi	r31, 0x02	; 2
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	93 83       	std	Z+3, r25	; 0x03
    1ee2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	08 95       	ret

00001eea <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1eea:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	91 11       	cpse	r25, r1
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <serial_input_available+0xc>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ef6:	08 95       	ret

00001ef8 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1ef8:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1efc:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <bytes_in_input_buffer>
    1f00:	08 95       	ret

00001f02 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	2f 93       	push	r18
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1f16:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1f1a:	88 23       	and	r24, r24
    1f1c:	29 f1       	breq	.+74     	; 0x1f68 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1f1e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <out_insert_pos>
    1f22:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	82 1b       	sub	r24, r18
    1f2a:	91 09       	sbc	r25, r1
    1f2c:	5a f4       	brpl	.+22     	; 0x1f44 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1f2e:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <out_insert_pos>
    1f32:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	e8 1b       	sub	r30, r24
    1f3a:	f1 09       	sbc	r31, r1
    1f3c:	e3 5a       	subi	r30, 0xA3	; 163
    1f3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f40:	90 81       	ld	r25, Z
    1f42:	0a c0       	rjmp	.+20     	; 0x1f58 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1f44:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <out_insert_pos>
    1f48:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	e8 1b       	sub	r30, r24
    1f50:	f1 09       	sbc	r31, r1
    1f52:	e2 5a       	subi	r30, 0xA2	; 162
    1f54:	fe 4f       	sbci	r31, 0xFE	; 254
    1f56:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1f58:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1f5c:	81 50       	subi	r24, 0x01	; 1
    1f5e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1f62:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1f68:	e1 ec       	ldi	r30, 0xC1	; 193
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7d       	andi	r24, 0xDF	; 223
    1f70:	80 83       	st	Z, r24
	}
}
    1f72:	ff 91       	pop	r31
    1f74:	ef 91       	pop	r30
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	2f 93       	push	r18
    1f92:	3f 93       	push	r19
    1f94:	4f 93       	push	r20
    1f96:	5f 93       	push	r21
    1f98:	6f 93       	push	r22
    1f9a:	7f 93       	push	r23
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	af 93       	push	r26
    1fa2:	bf 93       	push	r27
    1fa4:	cf 93       	push	r28
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1faa:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1fae:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <do_echo>
    1fb2:	88 23       	and	r24, r24
    1fb4:	49 f0       	breq	.+18     	; 0x1fc8 <__vector_20+0x42>
    1fb6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bytes_in_out_buffer>
    1fba:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	8c 2f       	mov	r24, r28
    1fc4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1fc8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1fcc:	80 31       	cpi	r24, 0x10	; 16
    1fce:	20 f0       	brcs	.+8      	; 0x1fd8 <__vector_20+0x52>
		input_overrun = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <input_overrun>
    1fd6:	18 c0       	rjmp	.+48     	; 0x2008 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1fd8:	cd 30       	cpi	r28, 0x0D	; 13
    1fda:	09 f4       	brne	.+2      	; 0x1fde <__vector_20+0x58>
			c = '\n';
    1fdc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1fde:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <input_insert_pos>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	8e 0f       	add	r24, r30
    1fe6:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <input_insert_pos>
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	e2 5a       	subi	r30, 0xA2	; 162
    1fee:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1ff2:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bytes_in_input_buffer>
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1ffc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <input_insert_pos>
    2000:	80 31       	cpi	r24, 0x10	; 16
    2002:	11 f4       	brne	.+4      	; 0x2008 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2004:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <input_insert_pos>
		}
	}
}
    2008:	ff 91       	pop	r31
    200a:	ef 91       	pop	r30
    200c:	cf 91       	pop	r28
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    202c:	94 b1       	in	r25, 0x04	; 4
    202e:	90 6b       	ori	r25, 0xB0	; 176
    2030:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    2032:	95 b1       	in	r25, 0x05	; 5
    2034:	90 61       	ori	r25, 0x10	; 16
    2036:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2038:	90 e5       	ldi	r25, 0x50	; 80
    203a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    203c:	88 30       	cpi	r24, 0x08	; 8
    203e:	21 f0       	breq	.+8      	; 0x2048 <spi_setup_master+0x1c>
    2040:	80 32       	cpi	r24, 0x20	; 32
    2042:	11 f0       	breq	.+4      	; 0x2048 <spi_setup_master+0x1c>
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	19 f4       	brne	.+6      	; 0x204e <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	9d bd       	out	0x2d, r25	; 45
			break;
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    204e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2050:	80 32       	cpi	r24, 0x20	; 32
    2052:	69 f0       	breq	.+26     	; 0x206e <spi_setup_master+0x42>
    2054:	28 f4       	brcc	.+10     	; 0x2060 <spi_setup_master+0x34>
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	71 f0       	breq	.+28     	; 0x2076 <spi_setup_master+0x4a>
    205a:	80 31       	cpi	r24, 0x10	; 16
    205c:	61 f0       	breq	.+24     	; 0x2076 <spi_setup_master+0x4a>
    205e:	0e c0       	rjmp	.+28     	; 0x207c <spi_setup_master+0x50>
    2060:	80 34       	cpi	r24, 0x40	; 64
    2062:	29 f0       	breq	.+10     	; 0x206e <spi_setup_master+0x42>
    2064:	80 38       	cpi	r24, 0x80	; 128
    2066:	51 f4       	brne	.+20     	; 0x207c <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
    2068:	8c b5       	in	r24, 0x2c	; 44
    206a:	81 60       	ori	r24, 0x01	; 1
    206c:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    206e:	8c b5       	in	r24, 0x2c	; 44
    2070:	82 60       	ori	r24, 0x02	; 2
    2072:	8c bd       	out	0x2c, r24	; 44
			break;
    2074:	03 c0       	rjmp	.+6      	; 0x207c <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2076:	8c b5       	in	r24, 0x2c	; 44
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    207c:	85 b1       	in	r24, 0x05	; 5
    207e:	8f 7e       	andi	r24, 0xEF	; 239
    2080:	85 b9       	out	0x05, r24	; 5
    2082:	08 95       	ret

00002084 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2084:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2086:	0d b4       	in	r0, 0x2d	; 45
    2088:	07 fe       	sbrs	r0, 7
    208a:	fd cf       	rjmp	.-6      	; 0x2086 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    208c:	8e b5       	in	r24, 0x2e	; 46
    208e:	08 95       	ret

00002090 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    2090:	9f 93       	push	r25
    2092:	8f 93       	push	r24
    2094:	7f 93       	push	r23
    2096:	6f 93       	push	r22
    2098:	88 e9       	ldi	r24, 0x98	; 152
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9f 93       	push	r25
    209e:	8f 93       	push	r24
    20a0:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	08 95       	ret

000020b2 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    20b2:	83 e9       	ldi	r24, 0x93	; 147
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	9f 93       	push	r25
    20b8:	8f 93       	push	r24
    20ba:	0e 94 2e 11 	call	0x225c	; 0x225c <printf_P>
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	08 95       	ret

000020c4 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    20c4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <clockTicks>
    20c8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <clockTicks+0x1>
    20cc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <clockTicks+0x2>
    20d0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    20d4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    20d6:	8c e7       	ldi	r24, 0x7C	; 124
    20d8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    20e2:	ee e6       	ldi	r30, 0x6E	; 110
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    20ec:	85 b3       	in	r24, 0x15	; 21
    20ee:	82 70       	andi	r24, 0x02	; 2
    20f0:	85 bb       	out	0x15, r24	; 21
    20f2:	08 95       	ret

000020f4 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    20f4:	8f b7       	in	r24, 0x3f	; 63
    20f6:	28 2f       	mov	r18, r24
    20f8:	20 78       	andi	r18, 0x80	; 128
	cli();
    20fa:	f8 94       	cli
	returnValue = clockTicks;
    20fc:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <clockTicks>
    2100:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <clockTicks+0x1>
    2104:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <clockTicks+0x2>
    2108:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <clockTicks+0x3>
	if(interruptsOn) {
    210c:	22 23       	and	r18, r18
    210e:	09 f0       	breq	.+2      	; 0x2112 <get_current_time+0x1e>
		sei();
    2110:	78 94       	sei
	}
	return returnValue;
}
    2112:	08 95       	ret

00002114 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    2126:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <clockTicks>
    212a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <clockTicks+0x1>
    212e:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <clockTicks+0x2>
    2132:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <clockTicks+0x3>
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	a1 1d       	adc	r26, r1
    213a:	b1 1d       	adc	r27, r1
    213c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <clockTicks>
    2140:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <clockTicks+0x1>
    2144:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <clockTicks+0x2>
    2148:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <clockTicks+0x3>
}
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__divmodsi4>:
    215e:	05 2e       	mov	r0, r21
    2160:	97 fb       	bst	r25, 7
    2162:	1e f4       	brtc	.+6      	; 0x216a <__divmodsi4+0xc>
    2164:	00 94       	com	r0
    2166:	0e 94 c6 10 	call	0x218c	; 0x218c <__negsi2>
    216a:	57 fd       	sbrc	r21, 7
    216c:	07 d0       	rcall	.+14     	; 0x217c <__divmodsi4_neg2>
    216e:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    2172:	07 fc       	sbrc	r0, 7
    2174:	03 d0       	rcall	.+6      	; 0x217c <__divmodsi4_neg2>
    2176:	4e f4       	brtc	.+18     	; 0x218a <__divmodsi4_exit>
    2178:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__negsi2>

0000217c <__divmodsi4_neg2>:
    217c:	50 95       	com	r21
    217e:	40 95       	com	r20
    2180:	30 95       	com	r19
    2182:	21 95       	neg	r18
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	4f 4f       	sbci	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255

0000218a <__divmodsi4_exit>:
    218a:	08 95       	ret

0000218c <__negsi2>:
    218c:	90 95       	com	r25
    218e:	80 95       	com	r24
    2190:	70 95       	com	r23
    2192:	61 95       	neg	r22
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <__udivmodsi4>:
    219c:	a1 e2       	ldi	r26, 0x21	; 33
    219e:	1a 2e       	mov	r1, r26
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	fd 01       	movw	r30, r26
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <__udivmodsi4_ep>

000021a8 <__udivmodsi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	ee 1f       	adc	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	a2 17       	cp	r26, r18
    21b2:	b3 07       	cpc	r27, r19
    21b4:	e4 07       	cpc	r30, r20
    21b6:	f5 07       	cpc	r31, r21
    21b8:	20 f0       	brcs	.+8      	; 0x21c2 <__udivmodsi4_ep>
    21ba:	a2 1b       	sub	r26, r18
    21bc:	b3 0b       	sbc	r27, r19
    21be:	e4 0b       	sbc	r30, r20
    21c0:	f5 0b       	sbc	r31, r21

000021c2 <__udivmodsi4_ep>:
    21c2:	66 1f       	adc	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	88 1f       	adc	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	1a 94       	dec	r1
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <__udivmodsi4_loop>
    21ce:	60 95       	com	r22
    21d0:	70 95       	com	r23
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	bd 01       	movw	r22, r26
    21dc:	cf 01       	movw	r24, r30
    21de:	08 95       	ret

000021e0 <fgetc>:
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	ec 01       	movw	r28, r24
    21e6:	2b 81       	ldd	r18, Y+3	; 0x03
    21e8:	20 ff       	sbrs	r18, 0
    21ea:	33 c0       	rjmp	.+102    	; 0x2252 <fgetc+0x72>
    21ec:	26 ff       	sbrs	r18, 6
    21ee:	0a c0       	rjmp	.+20     	; 0x2204 <fgetc+0x24>
    21f0:	2f 7b       	andi	r18, 0xBF	; 191
    21f2:	2b 83       	std	Y+3, r18	; 0x03
    21f4:	8e 81       	ldd	r24, Y+6	; 0x06
    21f6:	9f 81       	ldd	r25, Y+7	; 0x07
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	9f 83       	std	Y+7, r25	; 0x07
    21fc:	8e 83       	std	Y+6, r24	; 0x06
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	29 c0       	rjmp	.+82     	; 0x2256 <fgetc+0x76>
    2204:	22 ff       	sbrs	r18, 2
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <fgetc+0x46>
    2208:	e8 81       	ld	r30, Y
    220a:	f9 81       	ldd	r31, Y+1	; 0x01
    220c:	80 81       	ld	r24, Z
    220e:	08 2e       	mov	r0, r24
    2210:	00 0c       	add	r0, r0
    2212:	99 0b       	sbc	r25, r25
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	19 f4       	brne	.+6      	; 0x221e <fgetc+0x3e>
    2218:	20 62       	ori	r18, 0x20	; 32
    221a:	2b 83       	std	Y+3, r18	; 0x03
    221c:	1a c0       	rjmp	.+52     	; 0x2252 <fgetc+0x72>
    221e:	31 96       	adiw	r30, 0x01	; 1
    2220:	f9 83       	std	Y+1, r31	; 0x01
    2222:	e8 83       	st	Y, r30
    2224:	0e c0       	rjmp	.+28     	; 0x2242 <fgetc+0x62>
    2226:	ea 85       	ldd	r30, Y+10	; 0x0a
    2228:	fb 85       	ldd	r31, Y+11	; 0x0b
    222a:	09 95       	icall
    222c:	97 ff       	sbrs	r25, 7
    222e:	09 c0       	rjmp	.+18     	; 0x2242 <fgetc+0x62>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	11 f0       	breq	.+4      	; 0x223a <fgetc+0x5a>
    2236:	80 e2       	ldi	r24, 0x20	; 32
    2238:	01 c0       	rjmp	.+2      	; 0x223c <fgetc+0x5c>
    223a:	80 e1       	ldi	r24, 0x10	; 16
    223c:	82 2b       	or	r24, r18
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <fgetc+0x72>
    2242:	2e 81       	ldd	r18, Y+6	; 0x06
    2244:	3f 81       	ldd	r19, Y+7	; 0x07
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	3f 83       	std	Y+7, r19	; 0x07
    224c:	2e 83       	std	Y+6, r18	; 0x06
    224e:	99 27       	eor	r25, r25
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <fgetc+0x76>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <printf_P>:
    225c:	a0 e0       	ldi	r26, 0x00	; 0
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e4 e3       	ldi	r30, 0x34	; 52
    2262:	f1 e1       	ldi	r31, 0x11	; 17
    2264:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x1c>
    2268:	ae 01       	movw	r20, r28
    226a:	49 5f       	subi	r20, 0xF9	; 249
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	da 01       	movw	r26, r20
    2270:	6d 91       	ld	r22, X+
    2272:	7d 91       	ld	r23, X+
    2274:	ad 01       	movw	r20, r26
    2276:	00 e7       	ldi	r16, 0x70	; 112
    2278:	12 e0       	ldi	r17, 0x02	; 2
    227a:	f8 01       	movw	r30, r16
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	dc 01       	movw	r26, r24
    2282:	13 96       	adiw	r26, 0x03	; 3
    2284:	2c 91       	ld	r18, X
    2286:	13 97       	sbiw	r26, 0x03	; 3
    2288:	28 60       	ori	r18, 0x08	; 8
    228a:	13 96       	adiw	r26, 0x03	; 3
    228c:	2c 93       	st	X, r18
    228e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <vfprintf>
    2292:	d8 01       	movw	r26, r16
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	13 97       	sbiw	r26, 0x03	; 3
    229c:	23 81       	ldd	r18, Z+3	; 0x03
    229e:	27 7f       	andi	r18, 0xF7	; 247
    22a0:	23 83       	std	Z+3, r18	; 0x03
    22a2:	e4 e0       	ldi	r30, 0x04	; 4
    22a4:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x1c>

000022a8 <vfprintf>:
    22a8:	ab e0       	ldi	r26, 0x0B	; 11
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e5       	ldi	r30, 0x5A	; 90
    22ae:	f1 e1       	ldi	r31, 0x11	; 17
    22b0:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__>
    22b4:	6c 01       	movw	r12, r24
    22b6:	7b 01       	movw	r14, r22
    22b8:	8a 01       	movw	r16, r20
    22ba:	fc 01       	movw	r30, r24
    22bc:	17 82       	std	Z+7, r1	; 0x07
    22be:	16 82       	std	Z+6, r1	; 0x06
    22c0:	83 81       	ldd	r24, Z+3	; 0x03
    22c2:	81 ff       	sbrs	r24, 1
    22c4:	cc c1       	rjmp	.+920    	; 0x265e <vfprintf+0x3b6>
    22c6:	ce 01       	movw	r24, r28
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	3c 01       	movw	r6, r24
    22cc:	f6 01       	movw	r30, r12
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	f7 01       	movw	r30, r14
    22d2:	93 fd       	sbrc	r25, 3
    22d4:	85 91       	lpm	r24, Z+
    22d6:	93 ff       	sbrs	r25, 3
    22d8:	81 91       	ld	r24, Z+
    22da:	7f 01       	movw	r14, r30
    22dc:	88 23       	and	r24, r24
    22de:	09 f4       	brne	.+2      	; 0x22e2 <vfprintf+0x3a>
    22e0:	ba c1       	rjmp	.+884    	; 0x2656 <vfprintf+0x3ae>
    22e2:	85 32       	cpi	r24, 0x25	; 37
    22e4:	39 f4       	brne	.+14     	; 0x22f4 <vfprintf+0x4c>
    22e6:	93 fd       	sbrc	r25, 3
    22e8:	85 91       	lpm	r24, Z+
    22ea:	93 ff       	sbrs	r25, 3
    22ec:	81 91       	ld	r24, Z+
    22ee:	7f 01       	movw	r14, r30
    22f0:	85 32       	cpi	r24, 0x25	; 37
    22f2:	29 f4       	brne	.+10     	; 0x22fe <vfprintf+0x56>
    22f4:	b6 01       	movw	r22, r12
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    22fc:	e7 cf       	rjmp	.-50     	; 0x22cc <vfprintf+0x24>
    22fe:	91 2c       	mov	r9, r1
    2300:	21 2c       	mov	r2, r1
    2302:	31 2c       	mov	r3, r1
    2304:	ff e1       	ldi	r31, 0x1F	; 31
    2306:	f3 15       	cp	r31, r3
    2308:	d8 f0       	brcs	.+54     	; 0x2340 <vfprintf+0x98>
    230a:	8b 32       	cpi	r24, 0x2B	; 43
    230c:	79 f0       	breq	.+30     	; 0x232c <vfprintf+0x84>
    230e:	38 f4       	brcc	.+14     	; 0x231e <vfprintf+0x76>
    2310:	80 32       	cpi	r24, 0x20	; 32
    2312:	79 f0       	breq	.+30     	; 0x2332 <vfprintf+0x8a>
    2314:	83 32       	cpi	r24, 0x23	; 35
    2316:	a1 f4       	brne	.+40     	; 0x2340 <vfprintf+0x98>
    2318:	23 2d       	mov	r18, r3
    231a:	20 61       	ori	r18, 0x10	; 16
    231c:	1d c0       	rjmp	.+58     	; 0x2358 <vfprintf+0xb0>
    231e:	8d 32       	cpi	r24, 0x2D	; 45
    2320:	61 f0       	breq	.+24     	; 0x233a <vfprintf+0x92>
    2322:	80 33       	cpi	r24, 0x30	; 48
    2324:	69 f4       	brne	.+26     	; 0x2340 <vfprintf+0x98>
    2326:	23 2d       	mov	r18, r3
    2328:	21 60       	ori	r18, 0x01	; 1
    232a:	16 c0       	rjmp	.+44     	; 0x2358 <vfprintf+0xb0>
    232c:	83 2d       	mov	r24, r3
    232e:	82 60       	ori	r24, 0x02	; 2
    2330:	38 2e       	mov	r3, r24
    2332:	e3 2d       	mov	r30, r3
    2334:	e4 60       	ori	r30, 0x04	; 4
    2336:	3e 2e       	mov	r3, r30
    2338:	2a c0       	rjmp	.+84     	; 0x238e <vfprintf+0xe6>
    233a:	f3 2d       	mov	r31, r3
    233c:	f8 60       	ori	r31, 0x08	; 8
    233e:	1d c0       	rjmp	.+58     	; 0x237a <vfprintf+0xd2>
    2340:	37 fc       	sbrc	r3, 7
    2342:	2d c0       	rjmp	.+90     	; 0x239e <vfprintf+0xf6>
    2344:	20 ed       	ldi	r18, 0xD0	; 208
    2346:	28 0f       	add	r18, r24
    2348:	2a 30       	cpi	r18, 0x0A	; 10
    234a:	40 f0       	brcs	.+16     	; 0x235c <vfprintf+0xb4>
    234c:	8e 32       	cpi	r24, 0x2E	; 46
    234e:	b9 f4       	brne	.+46     	; 0x237e <vfprintf+0xd6>
    2350:	36 fc       	sbrc	r3, 6
    2352:	81 c1       	rjmp	.+770    	; 0x2656 <vfprintf+0x3ae>
    2354:	23 2d       	mov	r18, r3
    2356:	20 64       	ori	r18, 0x40	; 64
    2358:	32 2e       	mov	r3, r18
    235a:	19 c0       	rjmp	.+50     	; 0x238e <vfprintf+0xe6>
    235c:	36 fe       	sbrs	r3, 6
    235e:	06 c0       	rjmp	.+12     	; 0x236c <vfprintf+0xc4>
    2360:	8a e0       	ldi	r24, 0x0A	; 10
    2362:	98 9e       	mul	r9, r24
    2364:	20 0d       	add	r18, r0
    2366:	11 24       	eor	r1, r1
    2368:	92 2e       	mov	r9, r18
    236a:	11 c0       	rjmp	.+34     	; 0x238e <vfprintf+0xe6>
    236c:	ea e0       	ldi	r30, 0x0A	; 10
    236e:	2e 9e       	mul	r2, r30
    2370:	20 0d       	add	r18, r0
    2372:	11 24       	eor	r1, r1
    2374:	22 2e       	mov	r2, r18
    2376:	f3 2d       	mov	r31, r3
    2378:	f0 62       	ori	r31, 0x20	; 32
    237a:	3f 2e       	mov	r3, r31
    237c:	08 c0       	rjmp	.+16     	; 0x238e <vfprintf+0xe6>
    237e:	8c 36       	cpi	r24, 0x6C	; 108
    2380:	21 f4       	brne	.+8      	; 0x238a <vfprintf+0xe2>
    2382:	83 2d       	mov	r24, r3
    2384:	80 68       	ori	r24, 0x80	; 128
    2386:	38 2e       	mov	r3, r24
    2388:	02 c0       	rjmp	.+4      	; 0x238e <vfprintf+0xe6>
    238a:	88 36       	cpi	r24, 0x68	; 104
    238c:	41 f4       	brne	.+16     	; 0x239e <vfprintf+0xf6>
    238e:	f7 01       	movw	r30, r14
    2390:	93 fd       	sbrc	r25, 3
    2392:	85 91       	lpm	r24, Z+
    2394:	93 ff       	sbrs	r25, 3
    2396:	81 91       	ld	r24, Z+
    2398:	7f 01       	movw	r14, r30
    239a:	81 11       	cpse	r24, r1
    239c:	b3 cf       	rjmp	.-154    	; 0x2304 <vfprintf+0x5c>
    239e:	98 2f       	mov	r25, r24
    23a0:	9f 7d       	andi	r25, 0xDF	; 223
    23a2:	95 54       	subi	r25, 0x45	; 69
    23a4:	93 30       	cpi	r25, 0x03	; 3
    23a6:	28 f4       	brcc	.+10     	; 0x23b2 <vfprintf+0x10a>
    23a8:	0c 5f       	subi	r16, 0xFC	; 252
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	9f e3       	ldi	r25, 0x3F	; 63
    23ae:	99 83       	std	Y+1, r25	; 0x01
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <vfprintf+0x124>
    23b2:	83 36       	cpi	r24, 0x63	; 99
    23b4:	31 f0       	breq	.+12     	; 0x23c2 <vfprintf+0x11a>
    23b6:	83 37       	cpi	r24, 0x73	; 115
    23b8:	71 f0       	breq	.+28     	; 0x23d6 <vfprintf+0x12e>
    23ba:	83 35       	cpi	r24, 0x53	; 83
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <vfprintf+0x118>
    23be:	59 c0       	rjmp	.+178    	; 0x2472 <vfprintf+0x1ca>
    23c0:	21 c0       	rjmp	.+66     	; 0x2404 <vfprintf+0x15c>
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 81       	ld	r24, Z
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	0e 5f       	subi	r16, 0xFE	; 254
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	88 24       	eor	r8, r8
    23ce:	83 94       	inc	r8
    23d0:	91 2c       	mov	r9, r1
    23d2:	53 01       	movw	r10, r6
    23d4:	13 c0       	rjmp	.+38     	; 0x23fc <vfprintf+0x154>
    23d6:	28 01       	movw	r4, r16
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	4f 0e       	add	r4, r31
    23dc:	51 1c       	adc	r5, r1
    23de:	f8 01       	movw	r30, r16
    23e0:	a0 80       	ld	r10, Z
    23e2:	b1 80       	ldd	r11, Z+1	; 0x01
    23e4:	36 fe       	sbrs	r3, 6
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x146>
    23e8:	69 2d       	mov	r22, r9
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <vfprintf+0x14a>
    23ee:	6f ef       	ldi	r22, 0xFF	; 255
    23f0:	7f ef       	ldi	r23, 0xFF	; 255
    23f2:	c5 01       	movw	r24, r10
    23f4:	0e 94 40 13 	call	0x2680	; 0x2680 <strnlen>
    23f8:	4c 01       	movw	r8, r24
    23fa:	82 01       	movw	r16, r4
    23fc:	f3 2d       	mov	r31, r3
    23fe:	ff 77       	andi	r31, 0x7F	; 127
    2400:	3f 2e       	mov	r3, r31
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <vfprintf+0x188>
    2404:	28 01       	movw	r4, r16
    2406:	22 e0       	ldi	r18, 0x02	; 2
    2408:	42 0e       	add	r4, r18
    240a:	51 1c       	adc	r5, r1
    240c:	f8 01       	movw	r30, r16
    240e:	a0 80       	ld	r10, Z
    2410:	b1 80       	ldd	r11, Z+1	; 0x01
    2412:	36 fe       	sbrs	r3, 6
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x174>
    2416:	69 2d       	mov	r22, r9
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x178>
    241c:	6f ef       	ldi	r22, 0xFF	; 255
    241e:	7f ef       	ldi	r23, 0xFF	; 255
    2420:	c5 01       	movw	r24, r10
    2422:	0e 94 35 13 	call	0x266a	; 0x266a <strnlen_P>
    2426:	4c 01       	movw	r8, r24
    2428:	f3 2d       	mov	r31, r3
    242a:	f0 68       	ori	r31, 0x80	; 128
    242c:	3f 2e       	mov	r3, r31
    242e:	82 01       	movw	r16, r4
    2430:	33 fc       	sbrc	r3, 3
    2432:	1b c0       	rjmp	.+54     	; 0x246a <vfprintf+0x1c2>
    2434:	82 2d       	mov	r24, r2
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	88 16       	cp	r8, r24
    243a:	99 06       	cpc	r9, r25
    243c:	b0 f4       	brcc	.+44     	; 0x246a <vfprintf+0x1c2>
    243e:	b6 01       	movw	r22, r12
    2440:	80 e2       	ldi	r24, 0x20	; 32
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    2448:	2a 94       	dec	r2
    244a:	f4 cf       	rjmp	.-24     	; 0x2434 <vfprintf+0x18c>
    244c:	f5 01       	movw	r30, r10
    244e:	37 fc       	sbrc	r3, 7
    2450:	85 91       	lpm	r24, Z+
    2452:	37 fe       	sbrs	r3, 7
    2454:	81 91       	ld	r24, Z+
    2456:	5f 01       	movw	r10, r30
    2458:	b6 01       	movw	r22, r12
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    2460:	21 10       	cpse	r2, r1
    2462:	2a 94       	dec	r2
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	82 1a       	sub	r8, r18
    2468:	91 08       	sbc	r9, r1
    246a:	81 14       	cp	r8, r1
    246c:	91 04       	cpc	r9, r1
    246e:	71 f7       	brne	.-36     	; 0x244c <vfprintf+0x1a4>
    2470:	e8 c0       	rjmp	.+464    	; 0x2642 <vfprintf+0x39a>
    2472:	84 36       	cpi	r24, 0x64	; 100
    2474:	11 f0       	breq	.+4      	; 0x247a <vfprintf+0x1d2>
    2476:	89 36       	cpi	r24, 0x69	; 105
    2478:	41 f5       	brne	.+80     	; 0x24ca <vfprintf+0x222>
    247a:	f8 01       	movw	r30, r16
    247c:	37 fe       	sbrs	r3, 7
    247e:	07 c0       	rjmp	.+14     	; 0x248e <vfprintf+0x1e6>
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	0c 5f       	subi	r16, 0xFC	; 252
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	08 c0       	rjmp	.+16     	; 0x249e <vfprintf+0x1f6>
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	07 2e       	mov	r0, r23
    2494:	00 0c       	add	r0, r0
    2496:	88 0b       	sbc	r24, r24
    2498:	99 0b       	sbc	r25, r25
    249a:	0e 5f       	subi	r16, 0xFE	; 254
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	f3 2d       	mov	r31, r3
    24a0:	ff 76       	andi	r31, 0x6F	; 111
    24a2:	3f 2e       	mov	r3, r31
    24a4:	97 ff       	sbrs	r25, 7
    24a6:	09 c0       	rjmp	.+18     	; 0x24ba <vfprintf+0x212>
    24a8:	90 95       	com	r25
    24aa:	80 95       	com	r24
    24ac:	70 95       	com	r23
    24ae:	61 95       	neg	r22
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	8f 4f       	sbci	r24, 0xFF	; 255
    24b4:	9f 4f       	sbci	r25, 0xFF	; 255
    24b6:	f0 68       	ori	r31, 0x80	; 128
    24b8:	3f 2e       	mov	r3, r31
    24ba:	2a e0       	ldi	r18, 0x0A	; 10
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	a3 01       	movw	r20, r6
    24c0:	0e 94 87 13 	call	0x270e	; 0x270e <__ultoa_invert>
    24c4:	88 2e       	mov	r8, r24
    24c6:	86 18       	sub	r8, r6
    24c8:	45 c0       	rjmp	.+138    	; 0x2554 <vfprintf+0x2ac>
    24ca:	85 37       	cpi	r24, 0x75	; 117
    24cc:	31 f4       	brne	.+12     	; 0x24da <vfprintf+0x232>
    24ce:	23 2d       	mov	r18, r3
    24d0:	2f 7e       	andi	r18, 0xEF	; 239
    24d2:	b2 2e       	mov	r11, r18
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	25 c0       	rjmp	.+74     	; 0x2524 <vfprintf+0x27c>
    24da:	93 2d       	mov	r25, r3
    24dc:	99 7f       	andi	r25, 0xF9	; 249
    24de:	b9 2e       	mov	r11, r25
    24e0:	8f 36       	cpi	r24, 0x6F	; 111
    24e2:	c1 f0       	breq	.+48     	; 0x2514 <vfprintf+0x26c>
    24e4:	18 f4       	brcc	.+6      	; 0x24ec <vfprintf+0x244>
    24e6:	88 35       	cpi	r24, 0x58	; 88
    24e8:	79 f0       	breq	.+30     	; 0x2508 <vfprintf+0x260>
    24ea:	b5 c0       	rjmp	.+362    	; 0x2656 <vfprintf+0x3ae>
    24ec:	80 37       	cpi	r24, 0x70	; 112
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <vfprintf+0x24e>
    24f0:	88 37       	cpi	r24, 0x78	; 120
    24f2:	21 f0       	breq	.+8      	; 0x24fc <vfprintf+0x254>
    24f4:	b0 c0       	rjmp	.+352    	; 0x2656 <vfprintf+0x3ae>
    24f6:	e9 2f       	mov	r30, r25
    24f8:	e0 61       	ori	r30, 0x10	; 16
    24fa:	be 2e       	mov	r11, r30
    24fc:	b4 fe       	sbrs	r11, 4
    24fe:	0d c0       	rjmp	.+26     	; 0x251a <vfprintf+0x272>
    2500:	fb 2d       	mov	r31, r11
    2502:	f4 60       	ori	r31, 0x04	; 4
    2504:	bf 2e       	mov	r11, r31
    2506:	09 c0       	rjmp	.+18     	; 0x251a <vfprintf+0x272>
    2508:	34 fe       	sbrs	r3, 4
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <vfprintf+0x278>
    250c:	29 2f       	mov	r18, r25
    250e:	26 60       	ori	r18, 0x06	; 6
    2510:	b2 2e       	mov	r11, r18
    2512:	06 c0       	rjmp	.+12     	; 0x2520 <vfprintf+0x278>
    2514:	28 e0       	ldi	r18, 0x08	; 8
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <vfprintf+0x27c>
    251a:	20 e1       	ldi	r18, 0x10	; 16
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <vfprintf+0x27c>
    2520:	20 e1       	ldi	r18, 0x10	; 16
    2522:	32 e0       	ldi	r19, 0x02	; 2
    2524:	f8 01       	movw	r30, r16
    2526:	b7 fe       	sbrs	r11, 7
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <vfprintf+0x290>
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	0c 5f       	subi	r16, 0xFC	; 252
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <vfprintf+0x29c>
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 5f       	subi	r16, 0xFE	; 254
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	a3 01       	movw	r20, r6
    2546:	0e 94 87 13 	call	0x270e	; 0x270e <__ultoa_invert>
    254a:	88 2e       	mov	r8, r24
    254c:	86 18       	sub	r8, r6
    254e:	fb 2d       	mov	r31, r11
    2550:	ff 77       	andi	r31, 0x7F	; 127
    2552:	3f 2e       	mov	r3, r31
    2554:	36 fe       	sbrs	r3, 6
    2556:	0d c0       	rjmp	.+26     	; 0x2572 <vfprintf+0x2ca>
    2558:	23 2d       	mov	r18, r3
    255a:	2e 7f       	andi	r18, 0xFE	; 254
    255c:	a2 2e       	mov	r10, r18
    255e:	89 14       	cp	r8, r9
    2560:	58 f4       	brcc	.+22     	; 0x2578 <vfprintf+0x2d0>
    2562:	34 fe       	sbrs	r3, 4
    2564:	0b c0       	rjmp	.+22     	; 0x257c <vfprintf+0x2d4>
    2566:	32 fc       	sbrc	r3, 2
    2568:	09 c0       	rjmp	.+18     	; 0x257c <vfprintf+0x2d4>
    256a:	83 2d       	mov	r24, r3
    256c:	8e 7e       	andi	r24, 0xEE	; 238
    256e:	a8 2e       	mov	r10, r24
    2570:	05 c0       	rjmp	.+10     	; 0x257c <vfprintf+0x2d4>
    2572:	b8 2c       	mov	r11, r8
    2574:	a3 2c       	mov	r10, r3
    2576:	03 c0       	rjmp	.+6      	; 0x257e <vfprintf+0x2d6>
    2578:	b8 2c       	mov	r11, r8
    257a:	01 c0       	rjmp	.+2      	; 0x257e <vfprintf+0x2d6>
    257c:	b9 2c       	mov	r11, r9
    257e:	a4 fe       	sbrs	r10, 4
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <vfprintf+0x2f8>
    2582:	fe 01       	movw	r30, r28
    2584:	e8 0d       	add	r30, r8
    2586:	f1 1d       	adc	r31, r1
    2588:	80 81       	ld	r24, Z
    258a:	80 33       	cpi	r24, 0x30	; 48
    258c:	21 f4       	brne	.+8      	; 0x2596 <vfprintf+0x2ee>
    258e:	9a 2d       	mov	r25, r10
    2590:	99 7e       	andi	r25, 0xE9	; 233
    2592:	a9 2e       	mov	r10, r25
    2594:	09 c0       	rjmp	.+18     	; 0x25a8 <vfprintf+0x300>
    2596:	a2 fe       	sbrs	r10, 2
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <vfprintf+0x2fe>
    259a:	b3 94       	inc	r11
    259c:	b3 94       	inc	r11
    259e:	04 c0       	rjmp	.+8      	; 0x25a8 <vfprintf+0x300>
    25a0:	8a 2d       	mov	r24, r10
    25a2:	86 78       	andi	r24, 0x86	; 134
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <vfprintf+0x300>
    25a6:	b3 94       	inc	r11
    25a8:	a3 fc       	sbrc	r10, 3
    25aa:	11 c0       	rjmp	.+34     	; 0x25ce <vfprintf+0x326>
    25ac:	a0 fe       	sbrs	r10, 0
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <vfprintf+0x314>
    25b0:	b2 14       	cp	r11, r2
    25b2:	88 f4       	brcc	.+34     	; 0x25d6 <vfprintf+0x32e>
    25b4:	28 0c       	add	r2, r8
    25b6:	92 2c       	mov	r9, r2
    25b8:	9b 18       	sub	r9, r11
    25ba:	0e c0       	rjmp	.+28     	; 0x25d8 <vfprintf+0x330>
    25bc:	b2 14       	cp	r11, r2
    25be:	60 f4       	brcc	.+24     	; 0x25d8 <vfprintf+0x330>
    25c0:	b6 01       	movw	r22, r12
    25c2:	80 e2       	ldi	r24, 0x20	; 32
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    25ca:	b3 94       	inc	r11
    25cc:	f7 cf       	rjmp	.-18     	; 0x25bc <vfprintf+0x314>
    25ce:	b2 14       	cp	r11, r2
    25d0:	18 f4       	brcc	.+6      	; 0x25d8 <vfprintf+0x330>
    25d2:	2b 18       	sub	r2, r11
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <vfprintf+0x332>
    25d6:	98 2c       	mov	r9, r8
    25d8:	21 2c       	mov	r2, r1
    25da:	a4 fe       	sbrs	r10, 4
    25dc:	10 c0       	rjmp	.+32     	; 0x25fe <vfprintf+0x356>
    25de:	b6 01       	movw	r22, r12
    25e0:	80 e3       	ldi	r24, 0x30	; 48
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    25e8:	a2 fe       	sbrs	r10, 2
    25ea:	17 c0       	rjmp	.+46     	; 0x261a <vfprintf+0x372>
    25ec:	a1 fc       	sbrc	r10, 1
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <vfprintf+0x34e>
    25f0:	88 e7       	ldi	r24, 0x78	; 120
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <vfprintf+0x352>
    25f6:	88 e5       	ldi	r24, 0x58	; 88
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	b6 01       	movw	r22, r12
    25fc:	0c c0       	rjmp	.+24     	; 0x2616 <vfprintf+0x36e>
    25fe:	8a 2d       	mov	r24, r10
    2600:	86 78       	andi	r24, 0x86	; 134
    2602:	59 f0       	breq	.+22     	; 0x261a <vfprintf+0x372>
    2604:	a1 fe       	sbrs	r10, 1
    2606:	02 c0       	rjmp	.+4      	; 0x260c <vfprintf+0x364>
    2608:	8b e2       	ldi	r24, 0x2B	; 43
    260a:	01 c0       	rjmp	.+2      	; 0x260e <vfprintf+0x366>
    260c:	80 e2       	ldi	r24, 0x20	; 32
    260e:	a7 fc       	sbrc	r10, 7
    2610:	8d e2       	ldi	r24, 0x2D	; 45
    2612:	b6 01       	movw	r22, r12
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    261a:	89 14       	cp	r8, r9
    261c:	38 f4       	brcc	.+14     	; 0x262c <vfprintf+0x384>
    261e:	b6 01       	movw	r22, r12
    2620:	80 e3       	ldi	r24, 0x30	; 48
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    2628:	9a 94       	dec	r9
    262a:	f7 cf       	rjmp	.-18     	; 0x261a <vfprintf+0x372>
    262c:	8a 94       	dec	r8
    262e:	f3 01       	movw	r30, r6
    2630:	e8 0d       	add	r30, r8
    2632:	f1 1d       	adc	r31, r1
    2634:	80 81       	ld	r24, Z
    2636:	b6 01       	movw	r22, r12
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    263e:	81 10       	cpse	r8, r1
    2640:	f5 cf       	rjmp	.-22     	; 0x262c <vfprintf+0x384>
    2642:	22 20       	and	r2, r2
    2644:	09 f4       	brne	.+2      	; 0x2648 <vfprintf+0x3a0>
    2646:	42 ce       	rjmp	.-892    	; 0x22cc <vfprintf+0x24>
    2648:	b6 01       	movw	r22, r12
    264a:	80 e2       	ldi	r24, 0x20	; 32
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 4b 13 	call	0x2696	; 0x2696 <fputc>
    2652:	2a 94       	dec	r2
    2654:	f6 cf       	rjmp	.-20     	; 0x2642 <vfprintf+0x39a>
    2656:	f6 01       	movw	r30, r12
    2658:	86 81       	ldd	r24, Z+6	; 0x06
    265a:	97 81       	ldd	r25, Z+7	; 0x07
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <vfprintf+0x3ba>
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	2b 96       	adiw	r28, 0x0b	; 11
    2664:	e2 e1       	ldi	r30, 0x12	; 18
    2666:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__>

0000266a <strnlen_P>:
    266a:	fc 01       	movw	r30, r24
    266c:	05 90       	lpm	r0, Z+
    266e:	61 50       	subi	r22, 0x01	; 1
    2670:	70 40       	sbci	r23, 0x00	; 0
    2672:	01 10       	cpse	r0, r1
    2674:	d8 f7       	brcc	.-10     	; 0x266c <strnlen_P+0x2>
    2676:	80 95       	com	r24
    2678:	90 95       	com	r25
    267a:	8e 0f       	add	r24, r30
    267c:	9f 1f       	adc	r25, r31
    267e:	08 95       	ret

00002680 <strnlen>:
    2680:	fc 01       	movw	r30, r24
    2682:	61 50       	subi	r22, 0x01	; 1
    2684:	70 40       	sbci	r23, 0x00	; 0
    2686:	01 90       	ld	r0, Z+
    2688:	01 10       	cpse	r0, r1
    268a:	d8 f7       	brcc	.-10     	; 0x2682 <strnlen+0x2>
    268c:	80 95       	com	r24
    268e:	90 95       	com	r25
    2690:	8e 0f       	add	r24, r30
    2692:	9f 1f       	adc	r25, r31
    2694:	08 95       	ret

00002696 <fputc>:
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	fb 01       	movw	r30, r22
    26a0:	23 81       	ldd	r18, Z+3	; 0x03
    26a2:	21 fd       	sbrc	r18, 1
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <fputc+0x16>
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	2c c0       	rjmp	.+88     	; 0x2704 <fputc+0x6e>
    26ac:	22 ff       	sbrs	r18, 2
    26ae:	16 c0       	rjmp	.+44     	; 0x26dc <fputc+0x46>
    26b0:	46 81       	ldd	r20, Z+6	; 0x06
    26b2:	57 81       	ldd	r21, Z+7	; 0x07
    26b4:	24 81       	ldd	r18, Z+4	; 0x04
    26b6:	35 81       	ldd	r19, Z+5	; 0x05
    26b8:	42 17       	cp	r20, r18
    26ba:	53 07       	cpc	r21, r19
    26bc:	44 f4       	brge	.+16     	; 0x26ce <fputc+0x38>
    26be:	a0 81       	ld	r26, Z
    26c0:	b1 81       	ldd	r27, Z+1	; 0x01
    26c2:	9d 01       	movw	r18, r26
    26c4:	2f 5f       	subi	r18, 0xFF	; 255
    26c6:	3f 4f       	sbci	r19, 0xFF	; 255
    26c8:	31 83       	std	Z+1, r19	; 0x01
    26ca:	20 83       	st	Z, r18
    26cc:	8c 93       	st	X, r24
    26ce:	26 81       	ldd	r18, Z+6	; 0x06
    26d0:	37 81       	ldd	r19, Z+7	; 0x07
    26d2:	2f 5f       	subi	r18, 0xFF	; 255
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	37 83       	std	Z+7, r19	; 0x07
    26d8:	26 83       	std	Z+6, r18	; 0x06
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <fputc+0x6e>
    26dc:	8b 01       	movw	r16, r22
    26de:	ec 01       	movw	r28, r24
    26e0:	fb 01       	movw	r30, r22
    26e2:	00 84       	ldd	r0, Z+8	; 0x08
    26e4:	f1 85       	ldd	r31, Z+9	; 0x09
    26e6:	e0 2d       	mov	r30, r0
    26e8:	09 95       	icall
    26ea:	89 2b       	or	r24, r25
    26ec:	e1 f6       	brne	.-72     	; 0x26a6 <fputc+0x10>
    26ee:	d8 01       	movw	r26, r16
    26f0:	16 96       	adiw	r26, 0x06	; 6
    26f2:	8d 91       	ld	r24, X+
    26f4:	9c 91       	ld	r25, X
    26f6:	17 97       	sbiw	r26, 0x07	; 7
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	17 96       	adiw	r26, 0x07	; 7
    26fc:	9c 93       	st	X, r25
    26fe:	8e 93       	st	-X, r24
    2700:	16 97       	sbiw	r26, 0x06	; 6
    2702:	ce 01       	movw	r24, r28
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	08 95       	ret

0000270e <__ultoa_invert>:
    270e:	fa 01       	movw	r30, r20
    2710:	aa 27       	eor	r26, r26
    2712:	28 30       	cpi	r18, 0x08	; 8
    2714:	51 f1       	breq	.+84     	; 0x276a <__ultoa_invert+0x5c>
    2716:	20 31       	cpi	r18, 0x10	; 16
    2718:	81 f1       	breq	.+96     	; 0x277a <__ultoa_invert+0x6c>
    271a:	e8 94       	clt
    271c:	6f 93       	push	r22
    271e:	6e 7f       	andi	r22, 0xFE	; 254
    2720:	6e 5f       	subi	r22, 0xFE	; 254
    2722:	7f 4f       	sbci	r23, 0xFF	; 255
    2724:	8f 4f       	sbci	r24, 0xFF	; 255
    2726:	9f 4f       	sbci	r25, 0xFF	; 255
    2728:	af 4f       	sbci	r26, 0xFF	; 255
    272a:	b1 e0       	ldi	r27, 0x01	; 1
    272c:	3e d0       	rcall	.+124    	; 0x27aa <__ultoa_invert+0x9c>
    272e:	b4 e0       	ldi	r27, 0x04	; 4
    2730:	3c d0       	rcall	.+120    	; 0x27aa <__ultoa_invert+0x9c>
    2732:	67 0f       	add	r22, r23
    2734:	78 1f       	adc	r23, r24
    2736:	89 1f       	adc	r24, r25
    2738:	9a 1f       	adc	r25, r26
    273a:	a1 1d       	adc	r26, r1
    273c:	68 0f       	add	r22, r24
    273e:	79 1f       	adc	r23, r25
    2740:	8a 1f       	adc	r24, r26
    2742:	91 1d       	adc	r25, r1
    2744:	a1 1d       	adc	r26, r1
    2746:	6a 0f       	add	r22, r26
    2748:	71 1d       	adc	r23, r1
    274a:	81 1d       	adc	r24, r1
    274c:	91 1d       	adc	r25, r1
    274e:	a1 1d       	adc	r26, r1
    2750:	20 d0       	rcall	.+64     	; 0x2792 <__ultoa_invert+0x84>
    2752:	09 f4       	brne	.+2      	; 0x2756 <__ultoa_invert+0x48>
    2754:	68 94       	set
    2756:	3f 91       	pop	r19
    2758:	2a e0       	ldi	r18, 0x0A	; 10
    275a:	26 9f       	mul	r18, r22
    275c:	11 24       	eor	r1, r1
    275e:	30 19       	sub	r19, r0
    2760:	30 5d       	subi	r19, 0xD0	; 208
    2762:	31 93       	st	Z+, r19
    2764:	de f6       	brtc	.-74     	; 0x271c <__ultoa_invert+0xe>
    2766:	cf 01       	movw	r24, r30
    2768:	08 95       	ret
    276a:	46 2f       	mov	r20, r22
    276c:	47 70       	andi	r20, 0x07	; 7
    276e:	40 5d       	subi	r20, 0xD0	; 208
    2770:	41 93       	st	Z+, r20
    2772:	b3 e0       	ldi	r27, 0x03	; 3
    2774:	0f d0       	rcall	.+30     	; 0x2794 <__ultoa_invert+0x86>
    2776:	c9 f7       	brne	.-14     	; 0x276a <__ultoa_invert+0x5c>
    2778:	f6 cf       	rjmp	.-20     	; 0x2766 <__ultoa_invert+0x58>
    277a:	46 2f       	mov	r20, r22
    277c:	4f 70       	andi	r20, 0x0F	; 15
    277e:	40 5d       	subi	r20, 0xD0	; 208
    2780:	4a 33       	cpi	r20, 0x3A	; 58
    2782:	18 f0       	brcs	.+6      	; 0x278a <__ultoa_invert+0x7c>
    2784:	49 5d       	subi	r20, 0xD9	; 217
    2786:	31 fd       	sbrc	r19, 1
    2788:	40 52       	subi	r20, 0x20	; 32
    278a:	41 93       	st	Z+, r20
    278c:	02 d0       	rcall	.+4      	; 0x2792 <__ultoa_invert+0x84>
    278e:	a9 f7       	brne	.-22     	; 0x277a <__ultoa_invert+0x6c>
    2790:	ea cf       	rjmp	.-44     	; 0x2766 <__ultoa_invert+0x58>
    2792:	b4 e0       	ldi	r27, 0x04	; 4
    2794:	a6 95       	lsr	r26
    2796:	97 95       	ror	r25
    2798:	87 95       	ror	r24
    279a:	77 95       	ror	r23
    279c:	67 95       	ror	r22
    279e:	ba 95       	dec	r27
    27a0:	c9 f7       	brne	.-14     	; 0x2794 <__ultoa_invert+0x86>
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	61 05       	cpc	r22, r1
    27a6:	71 05       	cpc	r23, r1
    27a8:	08 95       	ret
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	0a 2e       	mov	r0, r26
    27b0:	06 94       	lsr	r0
    27b2:	57 95       	ror	r21
    27b4:	47 95       	ror	r20
    27b6:	37 95       	ror	r19
    27b8:	27 95       	ror	r18
    27ba:	ba 95       	dec	r27
    27bc:	c9 f7       	brne	.-14     	; 0x27b0 <__ultoa_invert+0xa2>
    27be:	62 0f       	add	r22, r18
    27c0:	73 1f       	adc	r23, r19
    27c2:	84 1f       	adc	r24, r20
    27c4:	95 1f       	adc	r25, r21
    27c6:	a0 1d       	adc	r26, r0
    27c8:	08 95       	ret

000027ca <__prologue_saves__>:
    27ca:	2f 92       	push	r2
    27cc:	3f 92       	push	r3
    27ce:	4f 92       	push	r4
    27d0:	5f 92       	push	r5
    27d2:	6f 92       	push	r6
    27d4:	7f 92       	push	r7
    27d6:	8f 92       	push	r8
    27d8:	9f 92       	push	r9
    27da:	af 92       	push	r10
    27dc:	bf 92       	push	r11
    27de:	cf 92       	push	r12
    27e0:	df 92       	push	r13
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	ca 1b       	sub	r28, r26
    27f4:	db 0b       	sbc	r29, r27
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	09 94       	ijmp

00002802 <__epilogue_restores__>:
    2802:	2a 88       	ldd	r2, Y+18	; 0x12
    2804:	39 88       	ldd	r3, Y+17	; 0x11
    2806:	48 88       	ldd	r4, Y+16	; 0x10
    2808:	5f 84       	ldd	r5, Y+15	; 0x0f
    280a:	6e 84       	ldd	r6, Y+14	; 0x0e
    280c:	7d 84       	ldd	r7, Y+13	; 0x0d
    280e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2810:	9b 84       	ldd	r9, Y+11	; 0x0b
    2812:	aa 84       	ldd	r10, Y+10	; 0x0a
    2814:	b9 84       	ldd	r11, Y+9	; 0x09
    2816:	c8 84       	ldd	r12, Y+8	; 0x08
    2818:	df 80       	ldd	r13, Y+7	; 0x07
    281a:	ee 80       	ldd	r14, Y+6	; 0x06
    281c:	fd 80       	ldd	r15, Y+5	; 0x05
    281e:	0c 81       	ldd	r16, Y+4	; 0x04
    2820:	1b 81       	ldd	r17, Y+3	; 0x03
    2822:	aa 81       	ldd	r26, Y+2	; 0x02
    2824:	b9 81       	ldd	r27, Y+1	; 0x01
    2826:	ce 0f       	add	r28, r30
    2828:	d1 1d       	adc	r29, r1
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	ed 01       	movw	r28, r26
    2836:	08 95       	ret

00002838 <_exit>:
    2838:	f8 94       	cli

0000283a <__stop_program>:
    283a:	ff cf       	rjmp	.-2      	; 0x283a <__stop_program>
